{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"69bd19980655b5b100ad342c409e7709625c23cb","modified":1539839313000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1501628194000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1501628194000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1501628194000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1501628194000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1501628194000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1501628194000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1501628194000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1501628194000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1501628194000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1501628194000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1501628194000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1501628194000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1501628194000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1501628194000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1501628194000},{"_id":"themes/next/_config.yml","hash":"cc31c820fac48d00c36136474b725be80afa5703","modified":1540358613824},{"_id":"source/_posts/git-merging-vs-rebasing.md","hash":"20e8986c7569e712c049a2d305b99f22773caaf4","modified":1552017250805},{"_id":"source/_posts/asciinema.md","hash":"34ef8011ca53fb42a930dafe239c4107d2b3575d","modified":1548989133454},{"_id":"source/_posts/nodejs-event-loop-timers-and-nexttick.md","hash":"12a5a40c9ee65ecb3b812daeebe421252d58b31c","modified":1551964079170},{"_id":"source/_posts/weekly-2019-01.md","hash":"eb49f8d0b6e88f59ad98c134531a2661c0ce5c75","modified":1548990031454},{"_id":"source/_posts/reminder.md","hash":"d48fb932d8fe1f18c1ff4007e1b2a797373bffad","modified":1548989058906},{"_id":"source/_data/next.yaml","hash":"3996a1caa0ba1120145f360f549dd44b9be8104b","modified":1540358695463},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1501628194000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1501628194000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1501628194000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1501628194000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1501628194000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1501628194000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1501628194000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1501628194000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1501628194000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1501628194000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1501628194000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1501628194000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1501628194000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1501628194000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1501628194000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1501628194000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1501628194000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1501628194000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1501628194000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1501628194000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1501628194000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1501628194000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1501628194000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1501628194000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1501628194000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1501628194000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1501628194000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1501628194000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1501628194000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1501628194000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1501628194000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1501628194000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1501628194000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1501628194000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1501628194000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1501628194000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1501628194000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1501628194000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1501628194000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1501628194000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1501628194000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1501628194000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1501628194000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1501628194000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1501628194000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1501628194000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501628194000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501628194000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501628194000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501628194000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501628194000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501628194000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1501628194000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1501628194000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1501628194000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1501628194000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1501628194000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1501628194000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1501628194000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1501628194000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1501628194000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1501628194000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1501628194000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1501628194000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1501628194000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1501628194000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1501628194000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1501628194000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501628194000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1501628194000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1501628194000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1501628194000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501628194000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1501628194000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1501628194000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1501628194000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501628194000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1501628194000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1501628194000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1501628194000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1501628194000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1501628194000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1501628194000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1501628194000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1501628194000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1501628194000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1501628194000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501628194000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501628194000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1501628194000},{"_id":"public/engine/asciinema/index.html","hash":"0400a1acd87aa8d620bed907d0729e3962ae1a03","modified":1551964113681},{"_id":"public/archives/index.html","hash":"9b6aa528d836484a0499caba2acb7920ad6aff0c","modified":1551964113681},{"_id":"public/archives/2018/index.html","hash":"6197831f44ff1d2a47add32b1e4ff6292b313671","modified":1551964113682},{"_id":"public/archives/2018/06/index.html","hash":"5a155b7e437d3f4e3a5b149472389b6f42fc321d","modified":1551964113682},{"_id":"public/archives/2018/10/index.html","hash":"b04dbc1e72a23479dc0692e786312e4b2b5d57a2","modified":1551964113682},{"_id":"public/archives/2019/index.html","hash":"62b4944deac4d0d65c533238e76bc9518de0359d","modified":1551964113682},{"_id":"public/me/reminder/index.html","hash":"d3ddb6c4b2ba458f5878275934a1c69cec4f9265","modified":1551964113682},{"_id":"public/archives/2019/01/index.html","hash":"47835bedc52b19d3e0e96892172df38aa4360038","modified":1551964113682},{"_id":"public/archives/2018/05/index.html","hash":"b2b5aae0fed31fa2778204e3a87d8b6b51d88a12","modified":1551964113682},{"_id":"public/categories/engine/index.html","hash":"867bea7813513815ac0f3d9638a8a076169aa5e6","modified":1551964113682},{"_id":"public/tags/study/index.html","hash":"a207a2607a3c7a901ad889ef6c4dcad734f7433a","modified":1551964113682},{"_id":"public/tags/skill/index.html","hash":"056dac40a2a4803142b59b9bcd6ac1bbffff00d0","modified":1551964113683},{"_id":"public/tags/weekly/index.html","hash":"73716e8812e429e0631d3174a9a79dcd355e3e92","modified":1551964113683},{"_id":"public/categories/me/index.html","hash":"fc7804f3b24650e7c7a0db944a2bda967a049a57","modified":1551964113683},{"_id":"public/engine/weekly-2019-01/index.html","hash":"4da32d2f3cd91c09a481969966099f055277a68e","modified":1551964113683},{"_id":"public/engine/nodejs-event-loop-timers-and-nexttick/index.html","hash":"312fd6e0c466b907af04120a6cb202598fbd2c0b","modified":1551964113683},{"_id":"public/index.html","hash":"626711190acc5e1472fcc47a8675f69739607525","modified":1552017263796},{"_id":"public/engine/git-merging-vs-rebasing/index.html","hash":"163981f19828247f9b58f8ba9295788cc8eb78c2","modified":1552017263801},{"_id":"public/archives/2019/03/index.html","hash":"f83466109e00739c77fcc526510ef21cdbf40af7","modified":1551964113688},{"_id":"public/CNAME","hash":"69bd19980655b5b100ad342c409e7709625c23cb","modified":1551964113688},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1551964113688},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1551964113688},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1551964113688},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1551964113688},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1551964113688},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1551964113688},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1551964113688},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1551964113689},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551964113689},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551964113689},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1551964113689},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1551964113689},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1551964113689},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1551964113689},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1551964113689},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1551964113690},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1551964113690},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1551964113690},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1551964113690},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1551964113690},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1551964113690},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1551964114231},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1551964114231},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1551964114233},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1551964114233},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1551964114233},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1551964114233},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1551964114233},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1551964114238},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1551964114238},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1551964114239},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1551964114239},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1551964114239},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1551964114239},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1551964114239},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1551964114239},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1551964114240},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1551964114240},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1551964114240},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1551964114240},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1551964114240},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1551964114240},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1551964114240},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1551964114240},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1551964114240},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1551964114240},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1551964114240},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1551964114240},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1551964114240},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1551964114240},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1551964114241},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1551964114241},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1551964114241},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1551964114241},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1551964114241},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1551964114241},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1551964114241},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1551964114241},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1551964114241},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1551964114241},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1551964114241},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1551964114241},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1551964114241},{"_id":"public/css/main.css","hash":"84b6299448c46d35c59ef6d570185a8868e90329","modified":1551964114241},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551964114241},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551964114241},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1551964114246},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1551964114246},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1551964114247},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1551964114247},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1551964114247},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1551964114247},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1551964114247},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1551964114247},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1551964114247},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1551964114247},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1551964114247},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1551964114247},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1551964114248},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1551964114252},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1551964114252},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1551964114252},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551964114253},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1551964114256},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551964114263},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1551964114263},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1551964114263},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1551964114263},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1551964114263},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1551964114263},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1551964114264},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1551964114267},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1551964114267},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1551964114268},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1551964114269},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1551964114272},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1551964114276},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1551964114276},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1551964114281},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1551964114294},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1551964114297}],"Category":[{"name":"工程","_id":"cjsynd12i0002huwfbj7b2xjt"},{"name":"日常","_id":"cjsynd12s000dhuwf0bmqgi5q"}],"Data":[{"_id":"next","data":{"keywords":"Sun Haohao, nodejs","scheme":"Mist","language":"zh-CN","sidebar":{"display":"hide"},"auto_excerpt":{"enable":true,"length":150}}}],"Page":[],"Post":[{"title":"Git Merge 与 Rebase 比较","date":"2019-03-07T13:08:17.000Z","_content":"\n\n> 原文：[Merging vs. Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n\n# 概念概述\n\n关于`rebase`和`merge`，需要了解的第一件事就是，它们解决的是同一个问题：将一个分支的改动合并到另外一个分支里。不过它们的工作方式却全然不同。\n\n考虑一下你正在分支`feature`下进行开发，团队中其他成员向主干提交代码的情况。这会造成`git`使用者常见的历史分叉的情况。\n\n![分叉图片](https://wac-cdn.atlassian.com/dam/jcr:01b0b04e-64f3-4659-af21-c4d86bc7cb0b/01.svg?cdnVersion=lc)\n\n假设你正在开发的内容，与主干中发生变更的部分有关联，那么你就需要使用`rebase`或者`merge`将主干的变更合并到自己的分支里。\n\n## Merge\n\n最简单的方法就是用下面这组命令将主干代码合并到分支里：\n\n```\n$ git checkout feature\n$ git merge master\n```\n\n或者将它们简化到一个命令里：\n\n```\n$ git merge feature master\n```\n\n然后会产生一个新的将两边提交历史关联在一起的新的提交版本：『合并提交』，然后时整个提交历史结构变成下面这个样子：\n\n![Merge提交历史图片](https://wac-cdn.atlassian.com/dam/jcr:e229fef6-2c2f-4a4f-b270-e1e1baa94055/02.svg?cdnVersion=lc)\n\n`merge`操作不会对分支产生任何影响，因此这个操作也是『无害』的操作。相比`rebase`能减少许多可能的风险。（后面会说到`rebase`给分支带来的影响和隐患。）\n\n这也意味着，每当你需要把主干代码合并到分支里时，你就需要一次额外的『合并提交』。尤其是主干变更非常频繁时，这些『合并提交』就会对你分支的提交历史形成干扰。这个问题虽然可以通过`git log`的高级特性来缓解，但是仍然会给其他维护者理解此分支的提交历史带来不小的障碍。\n\n## Rebase\n\n除了`merge`，你也可以使用`rebase`来将分支的基准重新定位到主干变更后的版本上。\n\n```\n$ git checkout feature\n$ git rebase master\n```\n\n这个操作会高效的将主干代码合并到分支中，并且将分支的基准变更到主干的最新版本上。但是与『合并提交』不同，`rebase`会为分支上每一个的历史提交都创建一个新的提交，并重写到分支的历史上。\n\n![Rebase提交历史图片](https://wac-cdn.atlassian.com/dam/jcr:5b153a22-38be-40d0-aec8-5f2fffc771e5/03.svg?cdnVersion=ld)\n\n`Rebase`的主要好处就是，它使分支的提交历史变得干净。一方面，它不会产生像`merge`操作那样带来的额外的提交信息；另一方面，从上图也可以看出来，它使提交历史变成了完美的线性模式——你可以从分支的最新版本一直追溯到最初版本，中间不会有任何的分叉。这也使得用诸如`git log`、`git bisect`和`gitk`之类的命令来处理项目时更加容易。\n","source":"_posts/git-merging-vs-rebasing.md","raw":"---\ntitle: Git Merge 与 Rebase 比较\ntags:\n  - 学习\ncategories:\n  - 工程\ndate: 2019-03-07 21:08:17\n---\n\n\n> 原文：[Merging vs. Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n\n# 概念概述\n\n关于`rebase`和`merge`，需要了解的第一件事就是，它们解决的是同一个问题：将一个分支的改动合并到另外一个分支里。不过它们的工作方式却全然不同。\n\n考虑一下你正在分支`feature`下进行开发，团队中其他成员向主干提交代码的情况。这会造成`git`使用者常见的历史分叉的情况。\n\n![分叉图片](https://wac-cdn.atlassian.com/dam/jcr:01b0b04e-64f3-4659-af21-c4d86bc7cb0b/01.svg?cdnVersion=lc)\n\n假设你正在开发的内容，与主干中发生变更的部分有关联，那么你就需要使用`rebase`或者`merge`将主干的变更合并到自己的分支里。\n\n## Merge\n\n最简单的方法就是用下面这组命令将主干代码合并到分支里：\n\n```\n$ git checkout feature\n$ git merge master\n```\n\n或者将它们简化到一个命令里：\n\n```\n$ git merge feature master\n```\n\n然后会产生一个新的将两边提交历史关联在一起的新的提交版本：『合并提交』，然后时整个提交历史结构变成下面这个样子：\n\n![Merge提交历史图片](https://wac-cdn.atlassian.com/dam/jcr:e229fef6-2c2f-4a4f-b270-e1e1baa94055/02.svg?cdnVersion=lc)\n\n`merge`操作不会对分支产生任何影响，因此这个操作也是『无害』的操作。相比`rebase`能减少许多可能的风险。（后面会说到`rebase`给分支带来的影响和隐患。）\n\n这也意味着，每当你需要把主干代码合并到分支里时，你就需要一次额外的『合并提交』。尤其是主干变更非常频繁时，这些『合并提交』就会对你分支的提交历史形成干扰。这个问题虽然可以通过`git log`的高级特性来缓解，但是仍然会给其他维护者理解此分支的提交历史带来不小的障碍。\n\n## Rebase\n\n除了`merge`，你也可以使用`rebase`来将分支的基准重新定位到主干变更后的版本上。\n\n```\n$ git checkout feature\n$ git rebase master\n```\n\n这个操作会高效的将主干代码合并到分支中，并且将分支的基准变更到主干的最新版本上。但是与『合并提交』不同，`rebase`会为分支上每一个的历史提交都创建一个新的提交，并重写到分支的历史上。\n\n![Rebase提交历史图片](https://wac-cdn.atlassian.com/dam/jcr:5b153a22-38be-40d0-aec8-5f2fffc771e5/03.svg?cdnVersion=ld)\n\n`Rebase`的主要好处就是，它使分支的提交历史变得干净。一方面，它不会产生像`merge`操作那样带来的额外的提交信息；另一方面，从上图也可以看出来，它使提交历史变成了完美的线性模式——你可以从分支的最新版本一直追溯到最初版本，中间不会有任何的分叉。这也使得用诸如`git log`、`git bisect`和`gitk`之类的命令来处理项目时更加容易。\n","slug":"git-merging-vs-rebasing","published":1,"updated":"2019-03-08T03:54:10.805Z","_id":"cjsynd1290000huwfcm9w7ptn","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>原文：<a href=\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\" target=\"_blank\" rel=\"noopener\">Merging vs. Rebasing</a></p>\n</blockquote>\n<h1 id=\"概念概述\"><a href=\"#概念概述\" class=\"headerlink\" title=\"概念概述\"></a>概念概述</h1><p>关于<code>rebase</code>和<code>merge</code>，需要了解的第一件事就是，它们解决的是同一个问题：将一个分支的改动合并到另外一个分支里。不过它们的工作方式却全然不同。</p>\n<p>考虑一下你正在分支<code>feature</code>下进行开发，团队中其他成员向主干提交代码的情况。这会造成<code>git</code>使用者常见的历史分叉的情况。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:01b0b04e-64f3-4659-af21-c4d86bc7cb0b/01.svg?cdnVersion=lc\" alt=\"分叉图片\"></p>\n<p>假设你正在开发的内容，与主干中发生变更的部分有关联，那么你就需要使用<code>rebase</code>或者<code>merge</code>将主干的变更合并到自己的分支里。</p>\n<h2 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h2><p>最简单的方法就是用下面这组命令将主干代码合并到分支里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout feature</span><br><span class=\"line\">$ git merge master</span><br></pre></td></tr></table></figure>\n<p>或者将它们简化到一个命令里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge feature master</span><br></pre></td></tr></table></figure>\n<p>然后会产生一个新的将两边提交历史关联在一起的新的提交版本：『合并提交』，然后时整个提交历史结构变成下面这个样子：</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:e229fef6-2c2f-4a4f-b270-e1e1baa94055/02.svg?cdnVersion=lc\" alt=\"Merge提交历史图片\"></p>\n<p><code>merge</code>操作不会对分支产生任何影响，因此这个操作也是『无害』的操作。相比<code>rebase</code>能减少许多可能的风险。（后面会说到<code>rebase</code>给分支带来的影响和隐患。）</p>\n<p>这也意味着，每当你需要把主干代码合并到分支里时，你就需要一次额外的『合并提交』。尤其是主干变更非常频繁时，这些『合并提交』就会对你分支的提交历史形成干扰。这个问题虽然可以通过<code>git log</code>的高级特性来缓解，但是仍然会给其他维护者理解此分支的提交历史带来不小的障碍。</p>\n<h2 id=\"Rebase\"><a href=\"#Rebase\" class=\"headerlink\" title=\"Rebase\"></a>Rebase</h2><p>除了<code>merge</code>，你也可以使用<code>rebase</code>来将分支的基准重新定位到主干变更后的版本上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout feature</span><br><span class=\"line\">$ git rebase master</span><br></pre></td></tr></table></figure>\n<p>这个操作会高效的将主干代码合并到分支中，并且将分支的基准变更到主干的最新版本上。但是与『合并提交』不同，<code>rebase</code>会为分支上每一个的历史提交都创建一个新的提交，并重写到分支的历史上。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:5b153a22-38be-40d0-aec8-5f2fffc771e5/03.svg?cdnVersion=ld\" alt=\"Rebase提交历史图片\"></p>\n<p><code>Rebase</code>的主要好处就是，它使分支的提交历史变得干净。一方面，它不会产生像<code>merge</code>操作那样带来的额外的提交信息；另一方面，从上图也可以看出来，它使提交历史变成了完美的线性模式——你可以从分支的最新版本一直追溯到最初版本，中间不会有任何的分叉。这也使得用诸如<code>git log</code>、<code>git bisect</code>和<code>gitk</code>之类的命令来处理项目时更加容易。</p>\n","site":{"data":{"next":{"keywords":"Sun Haohao, nodejs","scheme":"Mist","language":"zh-CN","sidebar":{"display":"hide"},"auto_excerpt":{"enable":true,"length":150}}}},"excerpt":"","more":"<blockquote>\n<p>原文：<a href=\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\" target=\"_blank\" rel=\"noopener\">Merging vs. Rebasing</a></p>\n</blockquote>\n<h1 id=\"概念概述\"><a href=\"#概念概述\" class=\"headerlink\" title=\"概念概述\"></a>概念概述</h1><p>关于<code>rebase</code>和<code>merge</code>，需要了解的第一件事就是，它们解决的是同一个问题：将一个分支的改动合并到另外一个分支里。不过它们的工作方式却全然不同。</p>\n<p>考虑一下你正在分支<code>feature</code>下进行开发，团队中其他成员向主干提交代码的情况。这会造成<code>git</code>使用者常见的历史分叉的情况。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:01b0b04e-64f3-4659-af21-c4d86bc7cb0b/01.svg?cdnVersion=lc\" alt=\"分叉图片\"></p>\n<p>假设你正在开发的内容，与主干中发生变更的部分有关联，那么你就需要使用<code>rebase</code>或者<code>merge</code>将主干的变更合并到自己的分支里。</p>\n<h2 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h2><p>最简单的方法就是用下面这组命令将主干代码合并到分支里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout feature</span><br><span class=\"line\">$ git merge master</span><br></pre></td></tr></table></figure>\n<p>或者将它们简化到一个命令里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge feature master</span><br></pre></td></tr></table></figure>\n<p>然后会产生一个新的将两边提交历史关联在一起的新的提交版本：『合并提交』，然后时整个提交历史结构变成下面这个样子：</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:e229fef6-2c2f-4a4f-b270-e1e1baa94055/02.svg?cdnVersion=lc\" alt=\"Merge提交历史图片\"></p>\n<p><code>merge</code>操作不会对分支产生任何影响，因此这个操作也是『无害』的操作。相比<code>rebase</code>能减少许多可能的风险。（后面会说到<code>rebase</code>给分支带来的影响和隐患。）</p>\n<p>这也意味着，每当你需要把主干代码合并到分支里时，你就需要一次额外的『合并提交』。尤其是主干变更非常频繁时，这些『合并提交』就会对你分支的提交历史形成干扰。这个问题虽然可以通过<code>git log</code>的高级特性来缓解，但是仍然会给其他维护者理解此分支的提交历史带来不小的障碍。</p>\n<h2 id=\"Rebase\"><a href=\"#Rebase\" class=\"headerlink\" title=\"Rebase\"></a>Rebase</h2><p>除了<code>merge</code>，你也可以使用<code>rebase</code>来将分支的基准重新定位到主干变更后的版本上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout feature</span><br><span class=\"line\">$ git rebase master</span><br></pre></td></tr></table></figure>\n<p>这个操作会高效的将主干代码合并到分支中，并且将分支的基准变更到主干的最新版本上。但是与『合并提交』不同，<code>rebase</code>会为分支上每一个的历史提交都创建一个新的提交，并重写到分支的历史上。</p>\n<p><img src=\"https://wac-cdn.atlassian.com/dam/jcr:5b153a22-38be-40d0-aec8-5f2fffc771e5/03.svg?cdnVersion=ld\" alt=\"Rebase提交历史图片\"></p>\n<p><code>Rebase</code>的主要好处就是，它使分支的提交历史变得干净。一方面，它不会产生像<code>merge</code>操作那样带来的额外的提交信息；另一方面，从上图也可以看出来，它使提交历史变成了完美的线性模式——你可以从分支的最新版本一直追溯到最初版本，中间不会有任何的分叉。这也使得用诸如<code>git log</code>、<code>git bisect</code>和<code>gitk</code>之类的命令来处理项目时更加容易。</p>\n"},{"title":"轻量级终端录屏软件 asciinema","date":"2018-10-24T04:58:49.000Z","_content":"\n\n在看Docker文档时，发现了[asciinema](https://asciinema.org/)，是一个非常好用的终端录屏软件。下面是一个Demo：\n<script id=\"asciicast-107090\" src=\"https://asciinema.org/a/107090.js\" async></script>\n[Demo是Docker的一个演示]\n总之不管是用于项目文档说明，还是其他地方都非常好用。\n","source":"_posts/asciinema.md","raw":"---\ntitle: 轻量级终端录屏软件 asciinema\ncategories:\n  - 工程\ntags:\n  - 技巧\ndate: 2018-10-24 12:58:49\n---\n\n\n在看Docker文档时，发现了[asciinema](https://asciinema.org/)，是一个非常好用的终端录屏软件。下面是一个Demo：\n<script id=\"asciicast-107090\" src=\"https://asciinema.org/a/107090.js\" async></script>\n[Demo是Docker的一个演示]\n总之不管是用于项目文档说明，还是其他地方都非常好用。\n","slug":"asciinema","published":1,"updated":"2019-02-01T02:45:33.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsynd12g0001huwfribsv1df","content":"<p>在看Docker文档时，发现了<a href=\"https://asciinema.org/\" target=\"_blank\" rel=\"noopener\">asciinema</a>，是一个非常好用的终端录屏软件。下面是一个Demo：</p>\n<p><script id=\"asciicast-107090\" src=\"https://asciinema.org/a/107090.js\" async></script><br>[Demo是Docker的一个演示]<br>总之不管是用于项目文档说明，还是其他地方都非常好用。</p>\n","site":{"data":{"next":{"keywords":"Sun Haohao, nodejs","scheme":"Mist","language":"zh-CN","sidebar":{"display":"hide"},"auto_excerpt":{"enable":true,"length":150}}}},"excerpt":"","more":"<p>在看Docker文档时，发现了<a href=\"https://asciinema.org/\" target=\"_blank\" rel=\"noopener\">asciinema</a>，是一个非常好用的终端录屏软件。下面是一个Demo：</p>\n<p><script id=\"asciicast-107090\" src=\"https://asciinema.org/a/107090.js\" async></script><br>[Demo是Docker的一个演示]<br>总之不管是用于项目文档说明，还是其他地方都非常好用。</p>\n"},{"title":"技术周刊-2019-01","date":"2019-01-31T08:58:04.000Z","_content":"\n## [聊聊AA实验的波动性](https://zhuanlan.zhihu.com/p/47339375)\n\n此文简单介绍了实验的波动性以及其意义，如何判断实验数据是波动的结果还是置信的结果。\n\n## [关于显著性检验](https://www.cnblogs.com/hdu-zsk/p/6293721.html)\n\n此文详细介绍了实验数据显著性的检验，可以认为是上一文的详细说明。\n同时此文也详细介绍了各个指标的详细计算方法，可用于生产实践中。\n\n## [MySQL binlog](https://zhuanlan.zhihu.com/p/33504555)\n\n此文简单介绍了MySQL的binlog原理及其应用，通过此文可对binlog有一个初步的认识。\n\n## [读扩散？写扩散？推拉架构一文搞定！](https://mp.weixin.qq.com/s/0eMIrlJIv-lot8eELBjUnw)\n\n58的架构师沈剑的文章，特点是通俗易懂，结合案例，非常具有可操作性，并且也有一定深度。\n这本身是一个专题集合，从多个方面介绍了通信机制中推与拉的选择与实践方案。\n\n## [The Log: What every software engineer should know about real-time data's unifying abstraction](https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying)\n\nKafka的主要作者Jay Kreps写的关于日志的理解，非常深入，非常值得一读，非常推荐。不过篇幅会有一点大，并且是英文。\n可以参考[学习笔记：The Log（我所读过的最好的一篇分布式技术文章）](http://www.cnblogs.com/foreach-break/p/notes_\nabout_distributed_system_and_The_log.html)来协助阅读。\n\n## [四层、七层负载均衡的区别](https://www.jianshu.com/p/fa937b8e6712)\n\n最近在阅读高性能服务端开发的书籍时常常遇到『四层负载均衡』和『七层负载均衡』，因此找到了一篇关于这两个异同的文章。\n","source":"_posts/weekly-2019-01.md","raw":"---\ntitle: 技术周刊-2019-01\ndate: 2019-01-31 16:58:04\ncategories:\n  - 工程\ntags:\n  - 周刊\n---\n\n## [聊聊AA实验的波动性](https://zhuanlan.zhihu.com/p/47339375)\n\n此文简单介绍了实验的波动性以及其意义，如何判断实验数据是波动的结果还是置信的结果。\n\n## [关于显著性检验](https://www.cnblogs.com/hdu-zsk/p/6293721.html)\n\n此文详细介绍了实验数据显著性的检验，可以认为是上一文的详细说明。\n同时此文也详细介绍了各个指标的详细计算方法，可用于生产实践中。\n\n## [MySQL binlog](https://zhuanlan.zhihu.com/p/33504555)\n\n此文简单介绍了MySQL的binlog原理及其应用，通过此文可对binlog有一个初步的认识。\n\n## [读扩散？写扩散？推拉架构一文搞定！](https://mp.weixin.qq.com/s/0eMIrlJIv-lot8eELBjUnw)\n\n58的架构师沈剑的文章，特点是通俗易懂，结合案例，非常具有可操作性，并且也有一定深度。\n这本身是一个专题集合，从多个方面介绍了通信机制中推与拉的选择与实践方案。\n\n## [The Log: What every software engineer should know about real-time data's unifying abstraction](https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying)\n\nKafka的主要作者Jay Kreps写的关于日志的理解，非常深入，非常值得一读，非常推荐。不过篇幅会有一点大，并且是英文。\n可以参考[学习笔记：The Log（我所读过的最好的一篇分布式技术文章）](http://www.cnblogs.com/foreach-break/p/notes_\nabout_distributed_system_and_The_log.html)来协助阅读。\n\n## [四层、七层负载均衡的区别](https://www.jianshu.com/p/fa937b8e6712)\n\n最近在阅读高性能服务端开发的书籍时常常遇到『四层负载均衡』和『七层负载均衡』，因此找到了一篇关于这两个异同的文章。\n","slug":"weekly-2019-01","published":1,"updated":"2019-02-01T03:00:31.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsynd12k0004huwfsbhja7ot","content":"<h2 id=\"聊聊AA实验的波动性\"><a href=\"#聊聊AA实验的波动性\" class=\"headerlink\" title=\"聊聊AA实验的波动性\"></a><a href=\"https://zhuanlan.zhihu.com/p/47339375\" target=\"_blank\" rel=\"noopener\">聊聊AA实验的波动性</a></h2><p>此文简单介绍了实验的波动性以及其意义，如何判断实验数据是波动的结果还是置信的结果。</p>\n<h2 id=\"关于显著性检验\"><a href=\"#关于显著性检验\" class=\"headerlink\" title=\"关于显著性检验\"></a><a href=\"https://www.cnblogs.com/hdu-zsk/p/6293721.html\" target=\"_blank\" rel=\"noopener\">关于显著性检验</a></h2><p>此文详细介绍了实验数据显著性的检验，可以认为是上一文的详细说明。<br>同时此文也详细介绍了各个指标的详细计算方法，可用于生产实践中。</p>\n<h2 id=\"MySQL-binlog\"><a href=\"#MySQL-binlog\" class=\"headerlink\" title=\"MySQL binlog\"></a><a href=\"https://zhuanlan.zhihu.com/p/33504555\" target=\"_blank\" rel=\"noopener\">MySQL binlog</a></h2><p>此文简单介绍了MySQL的binlog原理及其应用，通过此文可对binlog有一个初步的认识。</p>\n<h2 id=\"读扩散？写扩散？推拉架构一文搞定！\"><a href=\"#读扩散？写扩散？推拉架构一文搞定！\" class=\"headerlink\" title=\"读扩散？写扩散？推拉架构一文搞定！\"></a><a href=\"https://mp.weixin.qq.com/s/0eMIrlJIv-lot8eELBjUnw\" target=\"_blank\" rel=\"noopener\">读扩散？写扩散？推拉架构一文搞定！</a></h2><p>58的架构师沈剑的文章，特点是通俗易懂，结合案例，非常具有可操作性，并且也有一定深度。<br>这本身是一个专题集合，从多个方面介绍了通信机制中推与拉的选择与实践方案。</p>\n<h2 id=\"The-Log-What-every-software-engineer-should-know-about-real-time-data’s-unifying-abstraction\"><a href=\"#The-Log-What-every-software-engineer-should-know-about-real-time-data’s-unifying-abstraction\" class=\"headerlink\" title=\"The Log: What every software engineer should know about real-time data’s unifying abstraction\"></a><a href=\"https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying\" target=\"_blank\" rel=\"noopener\">The Log: What every software engineer should know about real-time data’s unifying abstraction</a></h2><p>Kafka的主要作者Jay Kreps写的关于日志的理解，非常深入，非常值得一读，非常推荐。不过篇幅会有一点大，并且是英文。<br>可以参考<a href=\"http://www.cnblogs.com/foreach-break/p/notes_\nabout_distributed_system_and_The_log.html\" target=\"_blank\" rel=\"noopener\">学习笔记：The Log（我所读过的最好的一篇分布式技术文章）</a>来协助阅读。</p>\n<h2 id=\"四层、七层负载均衡的区别\"><a href=\"#四层、七层负载均衡的区别\" class=\"headerlink\" title=\"四层、七层负载均衡的区别\"></a><a href=\"https://www.jianshu.com/p/fa937b8e6712\" target=\"_blank\" rel=\"noopener\">四层、七层负载均衡的区别</a></h2><p>最近在阅读高性能服务端开发的书籍时常常遇到『四层负载均衡』和『七层负载均衡』，因此找到了一篇关于这两个异同的文章。</p>\n","site":{"data":{"next":{"keywords":"Sun Haohao, nodejs","scheme":"Mist","language":"zh-CN","sidebar":{"display":"hide"},"auto_excerpt":{"enable":true,"length":150}}}},"excerpt":"","more":"<h2 id=\"聊聊AA实验的波动性\"><a href=\"#聊聊AA实验的波动性\" class=\"headerlink\" title=\"聊聊AA实验的波动性\"></a><a href=\"https://zhuanlan.zhihu.com/p/47339375\" target=\"_blank\" rel=\"noopener\">聊聊AA实验的波动性</a></h2><p>此文简单介绍了实验的波动性以及其意义，如何判断实验数据是波动的结果还是置信的结果。</p>\n<h2 id=\"关于显著性检验\"><a href=\"#关于显著性检验\" class=\"headerlink\" title=\"关于显著性检验\"></a><a href=\"https://www.cnblogs.com/hdu-zsk/p/6293721.html\" target=\"_blank\" rel=\"noopener\">关于显著性检验</a></h2><p>此文详细介绍了实验数据显著性的检验，可以认为是上一文的详细说明。<br>同时此文也详细介绍了各个指标的详细计算方法，可用于生产实践中。</p>\n<h2 id=\"MySQL-binlog\"><a href=\"#MySQL-binlog\" class=\"headerlink\" title=\"MySQL binlog\"></a><a href=\"https://zhuanlan.zhihu.com/p/33504555\" target=\"_blank\" rel=\"noopener\">MySQL binlog</a></h2><p>此文简单介绍了MySQL的binlog原理及其应用，通过此文可对binlog有一个初步的认识。</p>\n<h2 id=\"读扩散？写扩散？推拉架构一文搞定！\"><a href=\"#读扩散？写扩散？推拉架构一文搞定！\" class=\"headerlink\" title=\"读扩散？写扩散？推拉架构一文搞定！\"></a><a href=\"https://mp.weixin.qq.com/s/0eMIrlJIv-lot8eELBjUnw\" target=\"_blank\" rel=\"noopener\">读扩散？写扩散？推拉架构一文搞定！</a></h2><p>58的架构师沈剑的文章，特点是通俗易懂，结合案例，非常具有可操作性，并且也有一定深度。<br>这本身是一个专题集合，从多个方面介绍了通信机制中推与拉的选择与实践方案。</p>\n<h2 id=\"The-Log-What-every-software-engineer-should-know-about-real-time-data’s-unifying-abstraction\"><a href=\"#The-Log-What-every-software-engineer-should-know-about-real-time-data’s-unifying-abstraction\" class=\"headerlink\" title=\"The Log: What every software engineer should know about real-time data’s unifying abstraction\"></a><a href=\"https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying\" target=\"_blank\" rel=\"noopener\">The Log: What every software engineer should know about real-time data’s unifying abstraction</a></h2><p>Kafka的主要作者Jay Kreps写的关于日志的理解，非常深入，非常值得一读，非常推荐。不过篇幅会有一点大，并且是英文。<br>可以参考<a href=\"http://www.cnblogs.com/foreach-break/p/notes_\nabout_distributed_system_and_The_log.html\" target=\"_blank\" rel=\"noopener\">学习笔记：The Log（我所读过的最好的一篇分布式技术文章）</a>来协助阅读。</p>\n<h2 id=\"四层、七层负载均衡的区别\"><a href=\"#四层、七层负载均衡的区别\" class=\"headerlink\" title=\"四层、七层负载均衡的区别\"></a><a href=\"https://www.jianshu.com/p/fa937b8e6712\" target=\"_blank\" rel=\"noopener\">四层、七层负载均衡的区别</a></h2><p>最近在阅读高性能服务端开发的书籍时常常遇到『四层负载均衡』和『七层负载均衡』，因此找到了一篇关于这两个异同的文章。</p>\n"},{"title":"备忘录","date":"2018-05-24T11:46:03.000Z","_content":"\n## 百度员工股票登录网站\n\n网站地址是：https://www-us.computershare.com/employee/us/zh-cn/baidu\n使用私人帐号密码登录。\n","source":"_posts/reminder.md","raw":"---\ntitle: 备忘录\ndate: 2018-05-24 19:46:03\ncategories:\n    - 日常\n---\n\n## 百度员工股票登录网站\n\n网站地址是：https://www-us.computershare.com/employee/us/zh-cn/baidu\n使用私人帐号密码登录。\n","slug":"reminder","published":1,"updated":"2019-02-01T02:44:18.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsynd12m0005huwfsj3rx4p4","content":"<h2 id=\"百度员工股票登录网站\"><a href=\"#百度员工股票登录网站\" class=\"headerlink\" title=\"百度员工股票登录网站\"></a>百度员工股票登录网站</h2><p>网站地址是：<a href=\"https://www-us.computershare.com/employee/us/zh-cn/baidu\" target=\"_blank\" rel=\"noopener\">https://www-us.computershare.com/employee/us/zh-cn/baidu</a><br>使用私人帐号密码登录。</p>\n","site":{"data":{"next":{"keywords":"Sun Haohao, nodejs","scheme":"Mist","language":"zh-CN","sidebar":{"display":"hide"},"auto_excerpt":{"enable":true,"length":150}}}},"excerpt":"","more":"<h2 id=\"百度员工股票登录网站\"><a href=\"#百度员工股票登录网站\" class=\"headerlink\" title=\"百度员工股票登录网站\"></a>百度员工股票登录网站</h2><p>网站地址是：<a href=\"https://www-us.computershare.com/employee/us/zh-cn/baidu\" target=\"_blank\" rel=\"noopener\">https://www-us.computershare.com/employee/us/zh-cn/baidu</a><br>使用私人帐号密码登录。</p>\n"},{"title":"Nodejs的事件循环","date":"2018-06-04T08:44:33.000Z","_content":"\n\n最近想深入了解一下Nodejs的event loop，发现了官网上的[一篇文章][event-loop-timers-and-nexttick]。在Nodejs的[中文官网][nodejs-cn]上也没有收录。考虑日后也要常来翻阅，英语阅读起来确实也不直观，所以尝试翻译一下。（原汁原味是不可能的，肯定会有自己的理解参杂在里面）\n\n> 正文来自Nodejs官网[https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/]\n\n------分割线------\n\n## 什么是事件循环(Event Loop)\n\n事件循环通过下放IO任务到操作系统层面，使单线程的Nodejs具备执行非阻塞IO任务的能力。\n\n绝大多数现代操作系统都支持多进程，它们可以在后台并行执行多个任务。当一个任务运行结束后，操作系统会通知Nodejs。Nodejs然后在**轮询**队列中添加对应的回调，并最终执行回调。这部分细节后面再详细说明。\n\n## 事件循环流程\n\n当Nodejs启动时，它就会初始化事件循环，执行目标脚本（或者进入REPL模式，这个不在本文讨论范围之内）。在目标脚本内可能会有调用异步API、Timers、或者`process.nextTick()`等行为。然后Nodejs就会进入事件循环。\n\n下图简要的展示了事件循环流程中的各环节。\n\n```\n   ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n```\n\n_说明：每一个方框对应到事件循环的一个\"环节\"_\n\n每一个环节都有其特有的行为和一个先进先出的回调队列。当一个环节开始时，它会执行这个环节特有的行为，并执行回调队列里的所有回调函数，直到数量达到一个上限值。之后，事件循环会进入下一个环节并重复这一过程。\n\n由于所有执行的操作都可能引起_更多_的操作和事件，这些事件又会被内核添加到队列并在**轮询**阶段处理，因此在处理轮询事件的同时，也会有新的轮询事件添加到队列中。于是，长时间运行的回调会使轮询阶段执行得比定时器的阈值长久许多。查阅[定时器](#定时器)和[轮询](#轮询)了解更多细节\n\n_说明：在Windows和Linux/Unix上的实现上有一些对这个流程展示不太重要的微小差异。虽然实际上有七、八个环节，但是值得关心的，也就是Nodejs实际上用到的，只有上面示例的那些。_\n\n## 各环节概览\n\n* **定时器(timers)**: 这个环节执行通过`setTimeout`和`setInterval`设置的回调。\n* **待执行的回调(pending callbacks)**: 执行一些系统I/O的回调。\n* **空闲、准备(idle, prepare)**: 仅系统内部使用的环节。\n* **轮询(poll)**: 获取新的I/O事件；执行I/O回调（除了关闭回调和通过定时器以及`setImmediate`设置的回调以外的绝大多数回调）。Nodejs在必要的时候会在这个环节阻塞。\n* **检查(check)**: 执行`setImmediate`回调。\n* **关闭回调(close callbacks)**: 一些负责收尾清理资源的回调，比如`socket.on('close', ...)`。\n\n在每一次事件循环之间，Nodejs会检查是否还存在等待中的异步I/O或者定时器，如果没有，则会退出循环结束运行。\n\n## 各环节详解\n\n### 定时器\n\n通过定时器可以设置阈值，回调函数会在时间满足这个阈值后某个时间执行，但不能保证这个时间与阈值精准一致。定时器在事件a满足阈值后，会尽可能早的执行回调，但可能因操作系统的调度和其他的回调而有所延迟。\n\n_说明：技术上来说，定时器的执行时间受[轮询阶段](#轮询)的直接影响_\n\n例如，用定时器设置一个100毫秒后执行的回调，然后又开始异步读取一个文件，读取过程需要95毫秒。\n\n```javascript\nconst fs = require('fs');\n\nfunction someAsyncOperation(callback) {\n  // 假设读取文件需要95毫秒\n  fs.readFile('/path/to/file', callback);\n}\n\nconst timeoutScheduled = Date.now();\n\nsetTimeout(() => {\n  const delay = Date.now() - timeoutScheduled;\n\n  console.log(`${delay}ms have passed since I was scheduled`);\n}, 100);\n\n\n// 执行一个需要95毫秒的异步操作\nsomeAsyncOperation(() => {\n  const startCallback = Date.now();\n\n  // 执行一个需要10毫秒的同步操作\n  while (Date.now() - startCallback < 10) {\n    // do nothing\n  }\n});\n```\n\n当事件循环进入轮询阶段，回调队列为空（`fs.readFile()`还没有执行完毕）。因此系统会等待直到时间满足最近的一个定时器阈值。等到第95毫秒的时候，`fs.readFile()`执行完毕，并且将一个耗时10毫秒的回调添加到轮询阶段队列中并执行。当这个回调执行完毕后，轮询阶段队列再一次为空。这时系统发现时间已经满足最近的定时器阈值了，就返回到定时器阶段执行其回调。所以，在这个示例里，回调真正执行的时间是在设置回调后的105毫秒后。\n\n说明：为了防止事件循环因为轮询阶段而进入[饥饿][wikipedia-starvation]，[**libuv**][libuv]（实现Nodejs事件循环以及所有异步行为的C语言库）也会有一个轮询的固定（由系统决定）上限值。\n\n### 待执行的回调\n\n这个阶段执行一些系统操作的回调，像处理TCP错误之类的。比如一个TCP的socket在尝试连接时收到了`ECONNREFUSED`错误，一些\\*inx的操作系统会等待报告这个错误。那么它会被放到队列里，并且在这个阶段来处理。\n\n### 轮询\n\n轮询阶段有两个主要的工作：\n\n1. 计算轮询I/O和阻塞等待的时间\n2. 处理轮询回调队列里的事件\n\n当事件循环进入到这个阶段，_并且没有设置定时器_，那么可能会出现下面两种情况：\n\n* _如果**轮询**回调队列**不为空**_，事件循环会遍历整个回调队列，同步的执行这些回调，直到全部执行完毕，或者执行数量达到系统设置的固定上限值为止。\n* _如果**轮询**回调队列**为空**_，那么还会有两种情况：\n  * 如果设置了`setImmediate()`回调，那么事件循环会退出**轮询**阶段，进入到**检查**阶段并执行这些回调。\n  * 如果没有设置`setImmediate()`，那么事件循环会等待新的回调添加到回调队列中，并立刻执行。\n\n一旦**轮询**回调队列为空，事件循环就会检查当前时间_满足哪些定时器的时间阈值_。如果至少有一个定时器已经满足条件，那么事件循环会进入**定时器**阶段去执行那些定时器回调。\n\n### 检查\n\n这个阶段允许用户在轮询阶段结束后立刻执行回调。当**轮询**阶段空闲，并且存在通过`setImmediate()`设置的回调，那么事件循环不再等待，而是进入这个阶段。\n\n`setImmediate`实际上是一个在事件循环单独的阶段执行的定时器。它通过libuv的API，设置在轮询阶段结束后立刻执行的回调。\n\n通常，虽然代码的执行，系统一定会进入**轮询**阶段，然后等待新的请求、连接之类的。但是如果存在通过`setImmediate()`设置的回调并且**轮询**阶段空闲，那么事件循环就不在等待**轮询**事件而是进入**检查**阶段处理这些回调。\n\n### 关闭回调\n\n如果一个socket或者句柄突然关闭（如`socket.destroy()`），那么`error`事件会在这个阶段触发。除此之外这些事件通过`process.nextTick()`来触发。\n\n## `setImmediate()` vs `setTimeout()`\n\n`setImmediate()`和`setTimeout()`很像，但根据它们在不同的阶段调用，会有不同表现。\n\n* `setImmedate()`的设计用途是在**轮询**阶段结束后立刻执行回调。\n* `setTimeout()`的设计用途是在满足指定的时间阈值后执行回调。\n\n调用它们的时机会影响对应回调的执行顺序。如果它们都在主模块中调用，那么回调的顺序与脚本执行的速度直接相关（可能受到机器上其他应用的影响）。\n\n例如，我们在非IO循环（比如主模块）中运行下面这个脚本，那么脚本内的两个定时任务执行的顺序，受到脚本运行速度的影响而无法确定。\n\n```javascript\n// timeout_vs_immediate.js\nsetTimeout(() => {\n  console.log('timeout');\n}, 0);\n\nsetImmediate(() => {\n  console.log('immediate');\n});\n```\n\n```console\n$ node timeout_vs_immediate.js\ntimeout\nimmediate\n\n$ node timeout_vs_immediate.js\nimmediate\ntimeout\n```\n\n但是如果我们在IO循环内执行上面那个脚本，那么总是会先执行`setImmediate()`对应的回调。\n\n```javascript\n// timeout_vs_immediate.js\nconst fs = require('fs');\n\nfs.readFile(__filename, () => {\n  setTimeout(() => {\n    console.log('timeout');\n  }, 0);\n  setImmediate(() => {\n    console.log('immediate');\n  });\n});\n```\n\n```console\n$ node timeout_vs_immediate.js\nimmediate\ntimeout\n\n$ node timeout_vs_immediate.js\nimmediate\ntimeout\n```\n\n因此相对于`setTimeout()`，`setImmediate()`最大的优势就是，只要是在IO循环内，无论存在多少个定时器，`setImmediate()`的回调总是会最先执行。\n\n## `process.nextTick()`\n\n### 理解`process.nextTick()`\n\n你或许已经注意到`process.nextTick()`作为一个异步API，却并没有出现在上面的流程示意图中。这是因为`process.nextTick()`技术上来说并不是事件循环的一部分。无论事件循环处于哪个阶段，`process.nextTick()`总是会在当前的操作结束后立刻执行。\n\n再回过头看看异步循环的示意图，在某个阶段调用`process.nextTick()`后，所有`process.nextTick()`设置的回调都会在下个阶段开始前执行。这种特性可能会导致一些严重的问题。如果递归的调用`process.nextTick()`，那么就是因为无法进入轮询阶段而导致IO饥饿。\n\n### 为什么允许使用这个API\n\n那么为什么要在Nodejs中开放对这个API的使用呢。原因之一就是在Nodejs的设计理念中，API应该总是异步的，即使没有那个必要。比如：\n\n```javascript\nfunction apiCall(arg, callback) {\n  if (typeof arg !== 'string')\n    return process.nextTick(callback,\n                            new TypeError('argument should be string'));\n}\n```\n\n这段代码作用是检查参数是否正确，如果不正确那么通过回调回传一个错误。`process.nextTick()`这个API最近有一个更新，使它能够接收`callback`以外的参数，并将这些参数传递给`callback`回调函数。这样就不用再给`callback`加一层嵌套。\n\n那么这个代码要做的是，在用户其他代码执行完毕后再向用户返回这个错误。通过`process.nextTick()`，可以确保`apiCall`的回调一定能够在用户的代码执行完毕后，并且在进入事件循环的下一个环节之前执行。为了实现这个功能，系统允许展开JS调用栈，并且直接执行对应的回调。因此用户可以无限嵌套的调用`process.nextTick()`而不会触发`RangeError: Maximum call stack size exceeded from v8`的错误。\n\nNodejs的这个设计理念，可能会导致一些麻烦的情况。可以看一看下面这个例子：\n\n```javascript\nlet bar;\n\n// 这个函数有异步函数的特征，却以同步的方式调用回调函数\nfunction someAsyncApiCall(callback) { callback(); }\n\n// 回调函数在someAsyncApiCall结束之前调用了\nsomeAsyncApiCall(() => {\n  // someAsyncApiCall结束了，但是bar还没有被赋值\n  console.log('bar', bar); // undefined\n});\n\nbar = 1;\n```\n\n用户定义了一个具有异步特征的函数，但实际上确实同步执行的。当调用`someAsyncApiCall()`时，因为没有任何异步行为，其回调会在同一个事件循环的环节里执行。那么由于这个脚本还没有运行到后面，所以当在回调里读取`bar`时，其值并不存在。\n\n使用`process.nextTick()`后，脚本就能在回调执行前完成初始化变量、函数之类的工作。`process.nextTick()`同时也有防止事件循环进入下一个环节的能力。有时候我们需要在进入事件循环的下一个环节之前就把当前环节出现的错误通知给用户。\n\n这是上面使用了`process.nextTick()`的例子：\n\n```javascript\nlet bar;\n\nfunction someAsyncApiCall(callback) {\n  process.nextTick(callback);\n}\n\nsomeAsyncApiCall(() => {\n  console.log('bar', bar); // 1\n});\n\nbar = 1;\n```\n\n这是实际工作中的一个例子：\n\n```javascript\nconst server = net.createServer(() => {}).listen(8080);\n\nserver.on('listening', () => {});\n```\n\n当只传端口参数时，系统会立刻绑定端口号，并且立刻执行`listen()`回调。但是此时`.on('listening')`还没有执行，其回调也不会在绑定端口号后触发执行。\n\n为了绕过这个问题，`listen()`使用`nextTick()`将事件放到队列里，等脚本同步执行完毕后才会触发事件回调。这样，用户就可以按上面的方式设置事件回调函数了。\n\n## `process.nextTick()` vs `setImmediate()`\n\n那么对于用户来说，就有了两个功能类似但是名字容易让人混淆的API了。\n\n* `process.nextTick()`: 在当前事件循环环节立即触发回调。\n* `setImmediate()`: 在当前事件循环环节后面的环节触发回调。\n\n本质上来说，这两个API互换名称才更符合他们的表现，`process.nextTick()`比`setImmediate()`要『更加立即』的执行回调。但是由于历史原因也不太可能更改这两个API的名称，将它们对调可能会引起npm上的库大面积失效。每天都会有新的包加入到npm中，也就是说每过一天，互换这两个API名称带来的潜在危险也就越大。\n\n_我们建议用户使用`setImmediate()`，因为这个API名称释义性更强。（并且它的兼容性也更强，比如兼容浏览器端的js）_\n\n## 为什么使用`process.nextTick()`?\n\n有以下两个主要的原因。\n\n1. 允许用户处理错误、清理后续不再使用的资源，以及可能的在事件循环进入下一环节之前发起一个新的请求。\n2. 有时候需要在栈展开结束后，下一个事件循环环节之前执行回调。 \n\n如下就是一个满足用户预期的例子：\n\n```javascript\nconst server = net.createServer();\nserver.on('connection', (conn) => { });\n\nserver.listen(8080);\nserver.on('listening', () => { });\n```\n\n假设`listen()`在事件循环之初执行，而对应的回调通过`setImmediate()`设置。绑定端口会立刻执行，除非参数中有hostname。那么对于事件循环来说，它必须进入**轮询**环节之后，才会执行`listen`回调。在**轮询**环节，那么就可能收到一个连接，并在`listen`事件之前触发`connection`事件。\n\n另外一种情况就是，在继承了`EventEmitter`的类的构造函数中触发事件。\n\n```javascript\nconst EventEmitter = require('events');\nconst util = require('util');\n\nfunction MyEmitter() {\n  EventEmitter.call(this);\n  this.emit('event');\n}\nutil.inherits(MyEmitter, EventEmitter);\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\n  console.log('an event occurred!');\n});\n```\n\n由于用户还没有给对象设置事件的回调，在构造函数中触发事件不会触发任何回调。因此，可以通过`process.nextTick()`赋予在构造函数中触发回调的能力。\n\n```javascript\nconst EventEmitter = require('events');\nconst util = require('util');\n\nfunction MyEmitter() {\n  EventEmitter.call(this);\n\n  // 使用nextTick来触发事件\n  process.nextTick(() => {\n    this.emit('event');\n  });\n}\nutil.inherits(MyEmitter, EventEmitter);\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\n  console.log('an event occurred!');\n});\n```\n\n\n[event-loop-timers-and-nexttick]:https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\n[libuv]:http://libuv.org\n[nodejs-cn]:http://nodejs.cn\n[wikipedia-starvation]:https://en.wikipedia.org/wiki/Starvation_(computer_science)\n","source":"_posts/nodejs-event-loop-timers-and-nexttick.md","raw":"---\ntitle: Nodejs的事件循环\ncategories:\n  - 工程\ntags:\n  - 学习\ndate: 2018-06-04 16:44:33\n---\n\n\n最近想深入了解一下Nodejs的event loop，发现了官网上的[一篇文章][event-loop-timers-and-nexttick]。在Nodejs的[中文官网][nodejs-cn]上也没有收录。考虑日后也要常来翻阅，英语阅读起来确实也不直观，所以尝试翻译一下。（原汁原味是不可能的，肯定会有自己的理解参杂在里面）\n\n> 正文来自Nodejs官网[https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/]\n\n------分割线------\n\n## 什么是事件循环(Event Loop)\n\n事件循环通过下放IO任务到操作系统层面，使单线程的Nodejs具备执行非阻塞IO任务的能力。\n\n绝大多数现代操作系统都支持多进程，它们可以在后台并行执行多个任务。当一个任务运行结束后，操作系统会通知Nodejs。Nodejs然后在**轮询**队列中添加对应的回调，并最终执行回调。这部分细节后面再详细说明。\n\n## 事件循环流程\n\n当Nodejs启动时，它就会初始化事件循环，执行目标脚本（或者进入REPL模式，这个不在本文讨论范围之内）。在目标脚本内可能会有调用异步API、Timers、或者`process.nextTick()`等行为。然后Nodejs就会进入事件循环。\n\n下图简要的展示了事件循环流程中的各环节。\n\n```\n   ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n```\n\n_说明：每一个方框对应到事件循环的一个\"环节\"_\n\n每一个环节都有其特有的行为和一个先进先出的回调队列。当一个环节开始时，它会执行这个环节特有的行为，并执行回调队列里的所有回调函数，直到数量达到一个上限值。之后，事件循环会进入下一个环节并重复这一过程。\n\n由于所有执行的操作都可能引起_更多_的操作和事件，这些事件又会被内核添加到队列并在**轮询**阶段处理，因此在处理轮询事件的同时，也会有新的轮询事件添加到队列中。于是，长时间运行的回调会使轮询阶段执行得比定时器的阈值长久许多。查阅[定时器](#定时器)和[轮询](#轮询)了解更多细节\n\n_说明：在Windows和Linux/Unix上的实现上有一些对这个流程展示不太重要的微小差异。虽然实际上有七、八个环节，但是值得关心的，也就是Nodejs实际上用到的，只有上面示例的那些。_\n\n## 各环节概览\n\n* **定时器(timers)**: 这个环节执行通过`setTimeout`和`setInterval`设置的回调。\n* **待执行的回调(pending callbacks)**: 执行一些系统I/O的回调。\n* **空闲、准备(idle, prepare)**: 仅系统内部使用的环节。\n* **轮询(poll)**: 获取新的I/O事件；执行I/O回调（除了关闭回调和通过定时器以及`setImmediate`设置的回调以外的绝大多数回调）。Nodejs在必要的时候会在这个环节阻塞。\n* **检查(check)**: 执行`setImmediate`回调。\n* **关闭回调(close callbacks)**: 一些负责收尾清理资源的回调，比如`socket.on('close', ...)`。\n\n在每一次事件循环之间，Nodejs会检查是否还存在等待中的异步I/O或者定时器，如果没有，则会退出循环结束运行。\n\n## 各环节详解\n\n### 定时器\n\n通过定时器可以设置阈值，回调函数会在时间满足这个阈值后某个时间执行，但不能保证这个时间与阈值精准一致。定时器在事件a满足阈值后，会尽可能早的执行回调，但可能因操作系统的调度和其他的回调而有所延迟。\n\n_说明：技术上来说，定时器的执行时间受[轮询阶段](#轮询)的直接影响_\n\n例如，用定时器设置一个100毫秒后执行的回调，然后又开始异步读取一个文件，读取过程需要95毫秒。\n\n```javascript\nconst fs = require('fs');\n\nfunction someAsyncOperation(callback) {\n  // 假设读取文件需要95毫秒\n  fs.readFile('/path/to/file', callback);\n}\n\nconst timeoutScheduled = Date.now();\n\nsetTimeout(() => {\n  const delay = Date.now() - timeoutScheduled;\n\n  console.log(`${delay}ms have passed since I was scheduled`);\n}, 100);\n\n\n// 执行一个需要95毫秒的异步操作\nsomeAsyncOperation(() => {\n  const startCallback = Date.now();\n\n  // 执行一个需要10毫秒的同步操作\n  while (Date.now() - startCallback < 10) {\n    // do nothing\n  }\n});\n```\n\n当事件循环进入轮询阶段，回调队列为空（`fs.readFile()`还没有执行完毕）。因此系统会等待直到时间满足最近的一个定时器阈值。等到第95毫秒的时候，`fs.readFile()`执行完毕，并且将一个耗时10毫秒的回调添加到轮询阶段队列中并执行。当这个回调执行完毕后，轮询阶段队列再一次为空。这时系统发现时间已经满足最近的定时器阈值了，就返回到定时器阶段执行其回调。所以，在这个示例里，回调真正执行的时间是在设置回调后的105毫秒后。\n\n说明：为了防止事件循环因为轮询阶段而进入[饥饿][wikipedia-starvation]，[**libuv**][libuv]（实现Nodejs事件循环以及所有异步行为的C语言库）也会有一个轮询的固定（由系统决定）上限值。\n\n### 待执行的回调\n\n这个阶段执行一些系统操作的回调，像处理TCP错误之类的。比如一个TCP的socket在尝试连接时收到了`ECONNREFUSED`错误，一些\\*inx的操作系统会等待报告这个错误。那么它会被放到队列里，并且在这个阶段来处理。\n\n### 轮询\n\n轮询阶段有两个主要的工作：\n\n1. 计算轮询I/O和阻塞等待的时间\n2. 处理轮询回调队列里的事件\n\n当事件循环进入到这个阶段，_并且没有设置定时器_，那么可能会出现下面两种情况：\n\n* _如果**轮询**回调队列**不为空**_，事件循环会遍历整个回调队列，同步的执行这些回调，直到全部执行完毕，或者执行数量达到系统设置的固定上限值为止。\n* _如果**轮询**回调队列**为空**_，那么还会有两种情况：\n  * 如果设置了`setImmediate()`回调，那么事件循环会退出**轮询**阶段，进入到**检查**阶段并执行这些回调。\n  * 如果没有设置`setImmediate()`，那么事件循环会等待新的回调添加到回调队列中，并立刻执行。\n\n一旦**轮询**回调队列为空，事件循环就会检查当前时间_满足哪些定时器的时间阈值_。如果至少有一个定时器已经满足条件，那么事件循环会进入**定时器**阶段去执行那些定时器回调。\n\n### 检查\n\n这个阶段允许用户在轮询阶段结束后立刻执行回调。当**轮询**阶段空闲，并且存在通过`setImmediate()`设置的回调，那么事件循环不再等待，而是进入这个阶段。\n\n`setImmediate`实际上是一个在事件循环单独的阶段执行的定时器。它通过libuv的API，设置在轮询阶段结束后立刻执行的回调。\n\n通常，虽然代码的执行，系统一定会进入**轮询**阶段，然后等待新的请求、连接之类的。但是如果存在通过`setImmediate()`设置的回调并且**轮询**阶段空闲，那么事件循环就不在等待**轮询**事件而是进入**检查**阶段处理这些回调。\n\n### 关闭回调\n\n如果一个socket或者句柄突然关闭（如`socket.destroy()`），那么`error`事件会在这个阶段触发。除此之外这些事件通过`process.nextTick()`来触发。\n\n## `setImmediate()` vs `setTimeout()`\n\n`setImmediate()`和`setTimeout()`很像，但根据它们在不同的阶段调用，会有不同表现。\n\n* `setImmedate()`的设计用途是在**轮询**阶段结束后立刻执行回调。\n* `setTimeout()`的设计用途是在满足指定的时间阈值后执行回调。\n\n调用它们的时机会影响对应回调的执行顺序。如果它们都在主模块中调用，那么回调的顺序与脚本执行的速度直接相关（可能受到机器上其他应用的影响）。\n\n例如，我们在非IO循环（比如主模块）中运行下面这个脚本，那么脚本内的两个定时任务执行的顺序，受到脚本运行速度的影响而无法确定。\n\n```javascript\n// timeout_vs_immediate.js\nsetTimeout(() => {\n  console.log('timeout');\n}, 0);\n\nsetImmediate(() => {\n  console.log('immediate');\n});\n```\n\n```console\n$ node timeout_vs_immediate.js\ntimeout\nimmediate\n\n$ node timeout_vs_immediate.js\nimmediate\ntimeout\n```\n\n但是如果我们在IO循环内执行上面那个脚本，那么总是会先执行`setImmediate()`对应的回调。\n\n```javascript\n// timeout_vs_immediate.js\nconst fs = require('fs');\n\nfs.readFile(__filename, () => {\n  setTimeout(() => {\n    console.log('timeout');\n  }, 0);\n  setImmediate(() => {\n    console.log('immediate');\n  });\n});\n```\n\n```console\n$ node timeout_vs_immediate.js\nimmediate\ntimeout\n\n$ node timeout_vs_immediate.js\nimmediate\ntimeout\n```\n\n因此相对于`setTimeout()`，`setImmediate()`最大的优势就是，只要是在IO循环内，无论存在多少个定时器，`setImmediate()`的回调总是会最先执行。\n\n## `process.nextTick()`\n\n### 理解`process.nextTick()`\n\n你或许已经注意到`process.nextTick()`作为一个异步API，却并没有出现在上面的流程示意图中。这是因为`process.nextTick()`技术上来说并不是事件循环的一部分。无论事件循环处于哪个阶段，`process.nextTick()`总是会在当前的操作结束后立刻执行。\n\n再回过头看看异步循环的示意图，在某个阶段调用`process.nextTick()`后，所有`process.nextTick()`设置的回调都会在下个阶段开始前执行。这种特性可能会导致一些严重的问题。如果递归的调用`process.nextTick()`，那么就是因为无法进入轮询阶段而导致IO饥饿。\n\n### 为什么允许使用这个API\n\n那么为什么要在Nodejs中开放对这个API的使用呢。原因之一就是在Nodejs的设计理念中，API应该总是异步的，即使没有那个必要。比如：\n\n```javascript\nfunction apiCall(arg, callback) {\n  if (typeof arg !== 'string')\n    return process.nextTick(callback,\n                            new TypeError('argument should be string'));\n}\n```\n\n这段代码作用是检查参数是否正确，如果不正确那么通过回调回传一个错误。`process.nextTick()`这个API最近有一个更新，使它能够接收`callback`以外的参数，并将这些参数传递给`callback`回调函数。这样就不用再给`callback`加一层嵌套。\n\n那么这个代码要做的是，在用户其他代码执行完毕后再向用户返回这个错误。通过`process.nextTick()`，可以确保`apiCall`的回调一定能够在用户的代码执行完毕后，并且在进入事件循环的下一个环节之前执行。为了实现这个功能，系统允许展开JS调用栈，并且直接执行对应的回调。因此用户可以无限嵌套的调用`process.nextTick()`而不会触发`RangeError: Maximum call stack size exceeded from v8`的错误。\n\nNodejs的这个设计理念，可能会导致一些麻烦的情况。可以看一看下面这个例子：\n\n```javascript\nlet bar;\n\n// 这个函数有异步函数的特征，却以同步的方式调用回调函数\nfunction someAsyncApiCall(callback) { callback(); }\n\n// 回调函数在someAsyncApiCall结束之前调用了\nsomeAsyncApiCall(() => {\n  // someAsyncApiCall结束了，但是bar还没有被赋值\n  console.log('bar', bar); // undefined\n});\n\nbar = 1;\n```\n\n用户定义了一个具有异步特征的函数，但实际上确实同步执行的。当调用`someAsyncApiCall()`时，因为没有任何异步行为，其回调会在同一个事件循环的环节里执行。那么由于这个脚本还没有运行到后面，所以当在回调里读取`bar`时，其值并不存在。\n\n使用`process.nextTick()`后，脚本就能在回调执行前完成初始化变量、函数之类的工作。`process.nextTick()`同时也有防止事件循环进入下一个环节的能力。有时候我们需要在进入事件循环的下一个环节之前就把当前环节出现的错误通知给用户。\n\n这是上面使用了`process.nextTick()`的例子：\n\n```javascript\nlet bar;\n\nfunction someAsyncApiCall(callback) {\n  process.nextTick(callback);\n}\n\nsomeAsyncApiCall(() => {\n  console.log('bar', bar); // 1\n});\n\nbar = 1;\n```\n\n这是实际工作中的一个例子：\n\n```javascript\nconst server = net.createServer(() => {}).listen(8080);\n\nserver.on('listening', () => {});\n```\n\n当只传端口参数时，系统会立刻绑定端口号，并且立刻执行`listen()`回调。但是此时`.on('listening')`还没有执行，其回调也不会在绑定端口号后触发执行。\n\n为了绕过这个问题，`listen()`使用`nextTick()`将事件放到队列里，等脚本同步执行完毕后才会触发事件回调。这样，用户就可以按上面的方式设置事件回调函数了。\n\n## `process.nextTick()` vs `setImmediate()`\n\n那么对于用户来说，就有了两个功能类似但是名字容易让人混淆的API了。\n\n* `process.nextTick()`: 在当前事件循环环节立即触发回调。\n* `setImmediate()`: 在当前事件循环环节后面的环节触发回调。\n\n本质上来说，这两个API互换名称才更符合他们的表现，`process.nextTick()`比`setImmediate()`要『更加立即』的执行回调。但是由于历史原因也不太可能更改这两个API的名称，将它们对调可能会引起npm上的库大面积失效。每天都会有新的包加入到npm中，也就是说每过一天，互换这两个API名称带来的潜在危险也就越大。\n\n_我们建议用户使用`setImmediate()`，因为这个API名称释义性更强。（并且它的兼容性也更强，比如兼容浏览器端的js）_\n\n## 为什么使用`process.nextTick()`?\n\n有以下两个主要的原因。\n\n1. 允许用户处理错误、清理后续不再使用的资源，以及可能的在事件循环进入下一环节之前发起一个新的请求。\n2. 有时候需要在栈展开结束后，下一个事件循环环节之前执行回调。 \n\n如下就是一个满足用户预期的例子：\n\n```javascript\nconst server = net.createServer();\nserver.on('connection', (conn) => { });\n\nserver.listen(8080);\nserver.on('listening', () => { });\n```\n\n假设`listen()`在事件循环之初执行，而对应的回调通过`setImmediate()`设置。绑定端口会立刻执行，除非参数中有hostname。那么对于事件循环来说，它必须进入**轮询**环节之后，才会执行`listen`回调。在**轮询**环节，那么就可能收到一个连接，并在`listen`事件之前触发`connection`事件。\n\n另外一种情况就是，在继承了`EventEmitter`的类的构造函数中触发事件。\n\n```javascript\nconst EventEmitter = require('events');\nconst util = require('util');\n\nfunction MyEmitter() {\n  EventEmitter.call(this);\n  this.emit('event');\n}\nutil.inherits(MyEmitter, EventEmitter);\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\n  console.log('an event occurred!');\n});\n```\n\n由于用户还没有给对象设置事件的回调，在构造函数中触发事件不会触发任何回调。因此，可以通过`process.nextTick()`赋予在构造函数中触发回调的能力。\n\n```javascript\nconst EventEmitter = require('events');\nconst util = require('util');\n\nfunction MyEmitter() {\n  EventEmitter.call(this);\n\n  // 使用nextTick来触发事件\n  process.nextTick(() => {\n    this.emit('event');\n  });\n}\nutil.inherits(MyEmitter, EventEmitter);\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\n  console.log('an event occurred!');\n});\n```\n\n\n[event-loop-timers-and-nexttick]:https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\n[libuv]:http://libuv.org\n[nodejs-cn]:http://nodejs.cn\n[wikipedia-starvation]:https://en.wikipedia.org/wiki/Starvation_(computer_science)\n","slug":"nodejs-event-loop-timers-and-nexttick","published":1,"updated":"2019-03-07T13:07:59.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsynd19b000ihuwfmgy1ipt9","content":"<p>最近想深入了解一下Nodejs的event loop，发现了官网上的<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" rel=\"noopener\">一篇文章</a>。在Nodejs的<a href=\"http://nodejs.cn\" target=\"_blank\" rel=\"noopener\">中文官网</a>上也没有收录。考虑日后也要常来翻阅，英语阅读起来确实也不直观，所以尝试翻译一下。（原汁原味是不可能的，肯定会有自己的理解参杂在里面）</p>\n<blockquote>\n<p>正文来自Nodejs官网[<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/</a>]</p>\n</blockquote>\n<p>——分割线——</p>\n<h2 id=\"什么是事件循环-Event-Loop\"><a href=\"#什么是事件循环-Event-Loop\" class=\"headerlink\" title=\"什么是事件循环(Event Loop)\"></a>什么是事件循环(Event Loop)</h2><p>事件循环通过下放IO任务到操作系统层面，使单线程的Nodejs具备执行非阻塞IO任务的能力。</p>\n<p>绝大多数现代操作系统都支持多进程，它们可以在后台并行执行多个任务。当一个任务运行结束后，操作系统会通知Nodejs。Nodejs然后在<strong>轮询</strong>队列中添加对应的回调，并最终执行回调。这部分细节后面再详细说明。</p>\n<h2 id=\"事件循环流程\"><a href=\"#事件循环流程\" class=\"headerlink\" title=\"事件循环流程\"></a>事件循环流程</h2><p>当Nodejs启动时，它就会初始化事件循环，执行目标脚本（或者进入REPL模式，这个不在本文讨论范围之内）。在目标脚本内可能会有调用异步API、Timers、或者<code>process.nextTick()</code>等行为。然后Nodejs就会进入事件循环。</p>\n<p>下图简要的展示了事件循环流程中的各环节。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ┌───────────────────────────┐</span><br><span class=\"line\">┌─&gt;│           timers          │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │     pending callbacks     │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │       idle, prepare       │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      ┌───────────────┐</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      │   incoming:   │</span><br><span class=\"line\">│  │           poll            │&lt;─────┤  connections, │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      │   data, etc.  │</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      └───────────────┘</span><br><span class=\"line\">│  │           check           │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">└──┤      close callbacks      │</span><br><span class=\"line\">   └───────────────────────────┘</span><br></pre></td></tr></table></figure>\n<p><em>说明：每一个方框对应到事件循环的一个”环节”</em></p>\n<p>每一个环节都有其特有的行为和一个先进先出的回调队列。当一个环节开始时，它会执行这个环节特有的行为，并执行回调队列里的所有回调函数，直到数量达到一个上限值。之后，事件循环会进入下一个环节并重复这一过程。</p>\n<p>由于所有执行的操作都可能引起<em>更多</em>的操作和事件，这些事件又会被内核添加到队列并在<strong>轮询</strong>阶段处理，因此在处理轮询事件的同时，也会有新的轮询事件添加到队列中。于是，长时间运行的回调会使轮询阶段执行得比定时器的阈值长久许多。查阅<a href=\"#定时器\">定时器</a>和<a href=\"#轮询\">轮询</a>了解更多细节</p>\n<p><em>说明：在Windows和Linux/Unix上的实现上有一些对这个流程展示不太重要的微小差异。虽然实际上有七、八个环节，但是值得关心的，也就是Nodejs实际上用到的，只有上面示例的那些。</em></p>\n<h2 id=\"各环节概览\"><a href=\"#各环节概览\" class=\"headerlink\" title=\"各环节概览\"></a>各环节概览</h2><ul>\n<li><strong>定时器(timers)</strong>: 这个环节执行通过<code>setTimeout</code>和<code>setInterval</code>设置的回调。</li>\n<li><strong>待执行的回调(pending callbacks)</strong>: 执行一些系统I/O的回调。</li>\n<li><strong>空闲、准备(idle, prepare)</strong>: 仅系统内部使用的环节。</li>\n<li><strong>轮询(poll)</strong>: 获取新的I/O事件；执行I/O回调（除了关闭回调和通过定时器以及<code>setImmediate</code>设置的回调以外的绝大多数回调）。Nodejs在必要的时候会在这个环节阻塞。</li>\n<li><strong>检查(check)</strong>: 执行<code>setImmediate</code>回调。</li>\n<li><strong>关闭回调(close callbacks)</strong>: 一些负责收尾清理资源的回调，比如<code>socket.on(&#39;close&#39;, ...)</code>。</li>\n</ul>\n<p>在每一次事件循环之间，Nodejs会检查是否还存在等待中的异步I/O或者定时器，如果没有，则会退出循环结束运行。</p>\n<h2 id=\"各环节详解\"><a href=\"#各环节详解\" class=\"headerlink\" title=\"各环节详解\"></a>各环节详解</h2><h3 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h3><p>通过定时器可以设置阈值，回调函数会在时间满足这个阈值后某个时间执行，但不能保证这个时间与阈值精准一致。定时器在事件a满足阈值后，会尽可能早的执行回调，但可能因操作系统的调度和其他的回调而有所延迟。</p>\n<p><em>说明：技术上来说，定时器的执行时间受<a href=\"#轮询\">轮询阶段</a>的直接影响</em></p>\n<p>例如，用定时器设置一个100毫秒后执行的回调，然后又开始异步读取一个文件，读取过程需要95毫秒。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncOperation</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 假设读取文件需要95毫秒</span></span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'/path/to/file'</span>, callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeoutScheduled = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> delay = <span class=\"built_in\">Date</span>.now() - timeoutScheduled;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;delay&#125;</span>ms have passed since I was scheduled`</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行一个需要95毫秒的异步操作</span></span><br><span class=\"line\">someAsyncOperation(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> startCallback = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 执行一个需要10毫秒的同步操作</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">Date</span>.now() - startCallback &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当事件循环进入轮询阶段，回调队列为空（<code>fs.readFile()</code>还没有执行完毕）。因此系统会等待直到时间满足最近的一个定时器阈值。等到第95毫秒的时候，<code>fs.readFile()</code>执行完毕，并且将一个耗时10毫秒的回调添加到轮询阶段队列中并执行。当这个回调执行完毕后，轮询阶段队列再一次为空。这时系统发现时间已经满足最近的定时器阈值了，就返回到定时器阶段执行其回调。所以，在这个示例里，回调真正执行的时间是在设置回调后的105毫秒后。</p>\n<p>说明：为了防止事件循环因为轮询阶段而进入<a href=\"https://en.wikipedia.org/wiki/Starvation_(computer_science)\" target=\"_blank\" rel=\"noopener\">饥饿</a>，<a href=\"http://libuv.org\" target=\"_blank\" rel=\"noopener\"><strong>libuv</strong></a>（实现Nodejs事件循环以及所有异步行为的C语言库）也会有一个轮询的固定（由系统决定）上限值。</p>\n<h3 id=\"待执行的回调\"><a href=\"#待执行的回调\" class=\"headerlink\" title=\"待执行的回调\"></a>待执行的回调</h3><p>这个阶段执行一些系统操作的回调，像处理TCP错误之类的。比如一个TCP的socket在尝试连接时收到了<code>ECONNREFUSED</code>错误，一些*inx的操作系统会等待报告这个错误。那么它会被放到队列里，并且在这个阶段来处理。</p>\n<h3 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h3><p>轮询阶段有两个主要的工作：</p>\n<ol>\n<li>计算轮询I/O和阻塞等待的时间</li>\n<li>处理轮询回调队列里的事件</li>\n</ol>\n<p>当事件循环进入到这个阶段，<em>并且没有设置定时器</em>，那么可能会出现下面两种情况：</p>\n<ul>\n<li><em>如果<strong>轮询</strong>回调队列<strong>不为空</strong></em>，事件循环会遍历整个回调队列，同步的执行这些回调，直到全部执行完毕，或者执行数量达到系统设置的固定上限值为止。</li>\n<li><em>如果<strong>轮询</strong>回调队列<strong>为空</strong></em>，那么还会有两种情况：<ul>\n<li>如果设置了<code>setImmediate()</code>回调，那么事件循环会退出<strong>轮询</strong>阶段，进入到<strong>检查</strong>阶段并执行这些回调。</li>\n<li>如果没有设置<code>setImmediate()</code>，那么事件循环会等待新的回调添加到回调队列中，并立刻执行。</li>\n</ul>\n</li>\n</ul>\n<p>一旦<strong>轮询</strong>回调队列为空，事件循环就会检查当前时间<em>满足哪些定时器的时间阈值</em>。如果至少有一个定时器已经满足条件，那么事件循环会进入<strong>定时器</strong>阶段去执行那些定时器回调。</p>\n<h3 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h3><p>这个阶段允许用户在轮询阶段结束后立刻执行回调。当<strong>轮询</strong>阶段空闲，并且存在通过<code>setImmediate()</code>设置的回调，那么事件循环不再等待，而是进入这个阶段。</p>\n<p><code>setImmediate</code>实际上是一个在事件循环单独的阶段执行的定时器。它通过libuv的API，设置在轮询阶段结束后立刻执行的回调。</p>\n<p>通常，虽然代码的执行，系统一定会进入<strong>轮询</strong>阶段，然后等待新的请求、连接之类的。但是如果存在通过<code>setImmediate()</code>设置的回调并且<strong>轮询</strong>阶段空闲，那么事件循环就不在等待<strong>轮询</strong>事件而是进入<strong>检查</strong>阶段处理这些回调。</p>\n<h3 id=\"关闭回调\"><a href=\"#关闭回调\" class=\"headerlink\" title=\"关闭回调\"></a>关闭回调</h3><p>如果一个socket或者句柄突然关闭（如<code>socket.destroy()</code>），那么<code>error</code>事件会在这个阶段触发。除此之外这些事件通过<code>process.nextTick()</code>来触发。</p>\n<h2 id=\"setImmediate-vs-setTimeout\"><a href=\"#setImmediate-vs-setTimeout\" class=\"headerlink\" title=\"setImmediate() vs setTimeout()\"></a><code>setImmediate()</code> vs <code>setTimeout()</code></h2><p><code>setImmediate()</code>和<code>setTimeout()</code>很像，但根据它们在不同的阶段调用，会有不同表现。</p>\n<ul>\n<li><code>setImmedate()</code>的设计用途是在<strong>轮询</strong>阶段结束后立刻执行回调。</li>\n<li><code>setTimeout()</code>的设计用途是在满足指定的时间阈值后执行回调。</li>\n</ul>\n<p>调用它们的时机会影响对应回调的执行顺序。如果它们都在主模块中调用，那么回调的顺序与脚本执行的速度直接相关（可能受到机器上其他应用的影响）。</p>\n<p>例如，我们在非IO循环（比如主模块）中运行下面这个脚本，那么脚本内的两个定时任务执行的顺序，受到脚本运行速度的影响而无法确定。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// timeout_vs_immediate.js</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> node timeout_vs_immediate.js</span><br><span class=\"line\">timeout</span><br><span class=\"line\">immediate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> node timeout_vs_immediate.js</span><br><span class=\"line\">immediate</span><br><span class=\"line\">timeout</span><br></pre></td></tr></table></figure>\n<p>但是如果我们在IO循环内执行上面那个脚本，那么总是会先执行<code>setImmediate()</code>对应的回调。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// timeout_vs_immediate.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(__filename, () =&gt; &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> node timeout_vs_immediate.js</span><br><span class=\"line\">immediate</span><br><span class=\"line\">timeout</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> node timeout_vs_immediate.js</span><br><span class=\"line\">immediate</span><br><span class=\"line\">timeout</span><br></pre></td></tr></table></figure>\n<p>因此相对于<code>setTimeout()</code>，<code>setImmediate()</code>最大的优势就是，只要是在IO循环内，无论存在多少个定时器，<code>setImmediate()</code>的回调总是会最先执行。</p>\n<h2 id=\"process-nextTick\"><a href=\"#process-nextTick\" class=\"headerlink\" title=\"process.nextTick()\"></a><code>process.nextTick()</code></h2><h3 id=\"理解process-nextTick\"><a href=\"#理解process-nextTick\" class=\"headerlink\" title=\"理解process.nextTick()\"></a>理解<code>process.nextTick()</code></h3><p>你或许已经注意到<code>process.nextTick()</code>作为一个异步API，却并没有出现在上面的流程示意图中。这是因为<code>process.nextTick()</code>技术上来说并不是事件循环的一部分。无论事件循环处于哪个阶段，<code>process.nextTick()</code>总是会在当前的操作结束后立刻执行。</p>\n<p>再回过头看看异步循环的示意图，在某个阶段调用<code>process.nextTick()</code>后，所有<code>process.nextTick()</code>设置的回调都会在下个阶段开始前执行。这种特性可能会导致一些严重的问题。如果递归的调用<code>process.nextTick()</code>，那么就是因为无法进入轮询阶段而导致IO饥饿。</p>\n<h3 id=\"为什么允许使用这个API\"><a href=\"#为什么允许使用这个API\" class=\"headerlink\" title=\"为什么允许使用这个API\"></a>为什么允许使用这个API</h3><p>那么为什么要在Nodejs中开放对这个API的使用呢。原因之一就是在Nodejs的设计理念中，API应该总是异步的，即使没有那个必要。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apiCall</span>(<span class=\"params\">arg, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> arg !== <span class=\"string\">'string'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> process.nextTick(callback,</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'argument should be string'</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码作用是检查参数是否正确，如果不正确那么通过回调回传一个错误。<code>process.nextTick()</code>这个API最近有一个更新，使它能够接收<code>callback</code>以外的参数，并将这些参数传递给<code>callback</code>回调函数。这样就不用再给<code>callback</code>加一层嵌套。</p>\n<p>那么这个代码要做的是，在用户其他代码执行完毕后再向用户返回这个错误。通过<code>process.nextTick()</code>，可以确保<code>apiCall</code>的回调一定能够在用户的代码执行完毕后，并且在进入事件循环的下一个环节之前执行。为了实现这个功能，系统允许展开JS调用栈，并且直接执行对应的回调。因此用户可以无限嵌套的调用<code>process.nextTick()</code>而不会触发<code>RangeError: Maximum call stack size exceeded from v8</code>的错误。</p>\n<p>Nodejs的这个设计理念，可能会导致一些麻烦的情况。可以看一看下面这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个函数有异步函数的特征，却以同步的方式调用回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncApiCall</span>(<span class=\"params\">callback</span>) </span>&#123; callback(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调函数在someAsyncApiCall结束之前调用了</span></span><br><span class=\"line\">someAsyncApiCall(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// someAsyncApiCall结束了，但是bar还没有被赋值</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>, bar); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bar = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>用户定义了一个具有异步特征的函数，但实际上确实同步执行的。当调用<code>someAsyncApiCall()</code>时，因为没有任何异步行为，其回调会在同一个事件循环的环节里执行。那么由于这个脚本还没有运行到后面，所以当在回调里读取<code>bar</code>时，其值并不存在。</p>\n<p>使用<code>process.nextTick()</code>后，脚本就能在回调执行前完成初始化变量、函数之类的工作。<code>process.nextTick()</code>同时也有防止事件循环进入下一个环节的能力。有时候我们需要在进入事件循环的下一个环节之前就把当前环节出现的错误通知给用户。</p>\n<p>这是上面使用了<code>process.nextTick()</code>的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncApiCall</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  process.nextTick(callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">someAsyncApiCall(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>, bar); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bar = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>这是实际工作中的一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> server = net.createServer(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;).listen(<span class=\"number\">8080</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'listening'</span>, () =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p>当只传端口参数时，系统会立刻绑定端口号，并且立刻执行<code>listen()</code>回调。但是此时<code>.on(&#39;listening&#39;)</code>还没有执行，其回调也不会在绑定端口号后触发执行。</p>\n<p>为了绕过这个问题，<code>listen()</code>使用<code>nextTick()</code>将事件放到队列里，等脚本同步执行完毕后才会触发事件回调。这样，用户就可以按上面的方式设置事件回调函数了。</p>\n<h2 id=\"process-nextTick-vs-setImmediate\"><a href=\"#process-nextTick-vs-setImmediate\" class=\"headerlink\" title=\"process.nextTick() vs setImmediate()\"></a><code>process.nextTick()</code> vs <code>setImmediate()</code></h2><p>那么对于用户来说，就有了两个功能类似但是名字容易让人混淆的API了。</p>\n<ul>\n<li><code>process.nextTick()</code>: 在当前事件循环环节立即触发回调。</li>\n<li><code>setImmediate()</code>: 在当前事件循环环节后面的环节触发回调。</li>\n</ul>\n<p>本质上来说，这两个API互换名称才更符合他们的表现，<code>process.nextTick()</code>比<code>setImmediate()</code>要『更加立即』的执行回调。但是由于历史原因也不太可能更改这两个API的名称，将它们对调可能会引起npm上的库大面积失效。每天都会有新的包加入到npm中，也就是说每过一天，互换这两个API名称带来的潜在危险也就越大。</p>\n<p><em>我们建议用户使用<code>setImmediate()</code>，因为这个API名称释义性更强。（并且它的兼容性也更强，比如兼容浏览器端的js）</em></p>\n<h2 id=\"为什么使用process-nextTick\"><a href=\"#为什么使用process-nextTick\" class=\"headerlink\" title=\"为什么使用process.nextTick()?\"></a>为什么使用<code>process.nextTick()</code>?</h2><p>有以下两个主要的原因。</p>\n<ol>\n<li>允许用户处理错误、清理后续不再使用的资源，以及可能的在事件循环进入下一环节之前发起一个新的请求。</li>\n<li>有时候需要在栈展开结束后，下一个事件循环环节之前执行回调。 </li>\n</ol>\n<p>如下就是一个满足用户预期的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> server = net.createServer();</span><br><span class=\"line\">server.on(<span class=\"string\">'connection'</span>, (conn) =&gt; &#123; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8080</span>);</span><br><span class=\"line\">server.on(<span class=\"string\">'listening'</span>, () =&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure>\n<p>假设<code>listen()</code>在事件循环之初执行，而对应的回调通过<code>setImmediate()</code>设置。绑定端口会立刻执行，除非参数中有hostname。那么对于事件循环来说，它必须进入<strong>轮询</strong>环节之后，才会执行<code>listen</code>回调。在<strong>轮询</strong>环节，那么就可能收到一个连接，并在<code>listen</code>事件之前触发<code>connection</code>事件。</p>\n<p>另外一种情况就是，在继承了<code>EventEmitter</code>的类的构造函数中触发事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyEmitter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  EventEmitter.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.emit(<span class=\"string\">'event'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">util.inherits(MyEmitter, EventEmitter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myEmitter = <span class=\"keyword\">new</span> MyEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'an event occurred!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>由于用户还没有给对象设置事件的回调，在构造函数中触发事件不会触发任何回调。因此，可以通过<code>process.nextTick()</code>赋予在构造函数中触发回调的能力。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyEmitter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  EventEmitter.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用nextTick来触发事件</span></span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emit(<span class=\"string\">'event'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">util.inherits(MyEmitter, EventEmitter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myEmitter = <span class=\"keyword\">new</span> MyEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'an event occurred!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"next":{"keywords":"Sun Haohao, nodejs","scheme":"Mist","language":"zh-CN","sidebar":{"display":"hide"},"auto_excerpt":{"enable":true,"length":150}}}},"excerpt":"","more":"<p>最近想深入了解一下Nodejs的event loop，发现了官网上的<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" rel=\"noopener\">一篇文章</a>。在Nodejs的<a href=\"http://nodejs.cn\" target=\"_blank\" rel=\"noopener\">中文官网</a>上也没有收录。考虑日后也要常来翻阅，英语阅读起来确实也不直观，所以尝试翻译一下。（原汁原味是不可能的，肯定会有自己的理解参杂在里面）</p>\n<blockquote>\n<p>正文来自Nodejs官网[<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/</a>]</p>\n</blockquote>\n<p>——分割线——</p>\n<h2 id=\"什么是事件循环-Event-Loop\"><a href=\"#什么是事件循环-Event-Loop\" class=\"headerlink\" title=\"什么是事件循环(Event Loop)\"></a>什么是事件循环(Event Loop)</h2><p>事件循环通过下放IO任务到操作系统层面，使单线程的Nodejs具备执行非阻塞IO任务的能力。</p>\n<p>绝大多数现代操作系统都支持多进程，它们可以在后台并行执行多个任务。当一个任务运行结束后，操作系统会通知Nodejs。Nodejs然后在<strong>轮询</strong>队列中添加对应的回调，并最终执行回调。这部分细节后面再详细说明。</p>\n<h2 id=\"事件循环流程\"><a href=\"#事件循环流程\" class=\"headerlink\" title=\"事件循环流程\"></a>事件循环流程</h2><p>当Nodejs启动时，它就会初始化事件循环，执行目标脚本（或者进入REPL模式，这个不在本文讨论范围之内）。在目标脚本内可能会有调用异步API、Timers、或者<code>process.nextTick()</code>等行为。然后Nodejs就会进入事件循环。</p>\n<p>下图简要的展示了事件循环流程中的各环节。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ┌───────────────────────────┐</span><br><span class=\"line\">┌─&gt;│           timers          │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │     pending callbacks     │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │       idle, prepare       │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      ┌───────────────┐</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      │   incoming:   │</span><br><span class=\"line\">│  │           poll            │&lt;─────┤  connections, │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      │   data, etc.  │</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      └───────────────┘</span><br><span class=\"line\">│  │           check           │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">└──┤      close callbacks      │</span><br><span class=\"line\">   └───────────────────────────┘</span><br></pre></td></tr></table></figure>\n<p><em>说明：每一个方框对应到事件循环的一个”环节”</em></p>\n<p>每一个环节都有其特有的行为和一个先进先出的回调队列。当一个环节开始时，它会执行这个环节特有的行为，并执行回调队列里的所有回调函数，直到数量达到一个上限值。之后，事件循环会进入下一个环节并重复这一过程。</p>\n<p>由于所有执行的操作都可能引起<em>更多</em>的操作和事件，这些事件又会被内核添加到队列并在<strong>轮询</strong>阶段处理，因此在处理轮询事件的同时，也会有新的轮询事件添加到队列中。于是，长时间运行的回调会使轮询阶段执行得比定时器的阈值长久许多。查阅<a href=\"#定时器\">定时器</a>和<a href=\"#轮询\">轮询</a>了解更多细节</p>\n<p><em>说明：在Windows和Linux/Unix上的实现上有一些对这个流程展示不太重要的微小差异。虽然实际上有七、八个环节，但是值得关心的，也就是Nodejs实际上用到的，只有上面示例的那些。</em></p>\n<h2 id=\"各环节概览\"><a href=\"#各环节概览\" class=\"headerlink\" title=\"各环节概览\"></a>各环节概览</h2><ul>\n<li><strong>定时器(timers)</strong>: 这个环节执行通过<code>setTimeout</code>和<code>setInterval</code>设置的回调。</li>\n<li><strong>待执行的回调(pending callbacks)</strong>: 执行一些系统I/O的回调。</li>\n<li><strong>空闲、准备(idle, prepare)</strong>: 仅系统内部使用的环节。</li>\n<li><strong>轮询(poll)</strong>: 获取新的I/O事件；执行I/O回调（除了关闭回调和通过定时器以及<code>setImmediate</code>设置的回调以外的绝大多数回调）。Nodejs在必要的时候会在这个环节阻塞。</li>\n<li><strong>检查(check)</strong>: 执行<code>setImmediate</code>回调。</li>\n<li><strong>关闭回调(close callbacks)</strong>: 一些负责收尾清理资源的回调，比如<code>socket.on(&#39;close&#39;, ...)</code>。</li>\n</ul>\n<p>在每一次事件循环之间，Nodejs会检查是否还存在等待中的异步I/O或者定时器，如果没有，则会退出循环结束运行。</p>\n<h2 id=\"各环节详解\"><a href=\"#各环节详解\" class=\"headerlink\" title=\"各环节详解\"></a>各环节详解</h2><h3 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h3><p>通过定时器可以设置阈值，回调函数会在时间满足这个阈值后某个时间执行，但不能保证这个时间与阈值精准一致。定时器在事件a满足阈值后，会尽可能早的执行回调，但可能因操作系统的调度和其他的回调而有所延迟。</p>\n<p><em>说明：技术上来说，定时器的执行时间受<a href=\"#轮询\">轮询阶段</a>的直接影响</em></p>\n<p>例如，用定时器设置一个100毫秒后执行的回调，然后又开始异步读取一个文件，读取过程需要95毫秒。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncOperation</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 假设读取文件需要95毫秒</span></span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'/path/to/file'</span>, callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeoutScheduled = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> delay = <span class=\"built_in\">Date</span>.now() - timeoutScheduled;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;delay&#125;</span>ms have passed since I was scheduled`</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行一个需要95毫秒的异步操作</span></span><br><span class=\"line\">someAsyncOperation(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> startCallback = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 执行一个需要10毫秒的同步操作</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">Date</span>.now() - startCallback &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当事件循环进入轮询阶段，回调队列为空（<code>fs.readFile()</code>还没有执行完毕）。因此系统会等待直到时间满足最近的一个定时器阈值。等到第95毫秒的时候，<code>fs.readFile()</code>执行完毕，并且将一个耗时10毫秒的回调添加到轮询阶段队列中并执行。当这个回调执行完毕后，轮询阶段队列再一次为空。这时系统发现时间已经满足最近的定时器阈值了，就返回到定时器阶段执行其回调。所以，在这个示例里，回调真正执行的时间是在设置回调后的105毫秒后。</p>\n<p>说明：为了防止事件循环因为轮询阶段而进入<a href=\"https://en.wikipedia.org/wiki/Starvation_(computer_science)\" target=\"_blank\" rel=\"noopener\">饥饿</a>，<a href=\"http://libuv.org\" target=\"_blank\" rel=\"noopener\"><strong>libuv</strong></a>（实现Nodejs事件循环以及所有异步行为的C语言库）也会有一个轮询的固定（由系统决定）上限值。</p>\n<h3 id=\"待执行的回调\"><a href=\"#待执行的回调\" class=\"headerlink\" title=\"待执行的回调\"></a>待执行的回调</h3><p>这个阶段执行一些系统操作的回调，像处理TCP错误之类的。比如一个TCP的socket在尝试连接时收到了<code>ECONNREFUSED</code>错误，一些*inx的操作系统会等待报告这个错误。那么它会被放到队列里，并且在这个阶段来处理。</p>\n<h3 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h3><p>轮询阶段有两个主要的工作：</p>\n<ol>\n<li>计算轮询I/O和阻塞等待的时间</li>\n<li>处理轮询回调队列里的事件</li>\n</ol>\n<p>当事件循环进入到这个阶段，<em>并且没有设置定时器</em>，那么可能会出现下面两种情况：</p>\n<ul>\n<li><em>如果<strong>轮询</strong>回调队列<strong>不为空</strong></em>，事件循环会遍历整个回调队列，同步的执行这些回调，直到全部执行完毕，或者执行数量达到系统设置的固定上限值为止。</li>\n<li><em>如果<strong>轮询</strong>回调队列<strong>为空</strong></em>，那么还会有两种情况：<ul>\n<li>如果设置了<code>setImmediate()</code>回调，那么事件循环会退出<strong>轮询</strong>阶段，进入到<strong>检查</strong>阶段并执行这些回调。</li>\n<li>如果没有设置<code>setImmediate()</code>，那么事件循环会等待新的回调添加到回调队列中，并立刻执行。</li>\n</ul>\n</li>\n</ul>\n<p>一旦<strong>轮询</strong>回调队列为空，事件循环就会检查当前时间<em>满足哪些定时器的时间阈值</em>。如果至少有一个定时器已经满足条件，那么事件循环会进入<strong>定时器</strong>阶段去执行那些定时器回调。</p>\n<h3 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h3><p>这个阶段允许用户在轮询阶段结束后立刻执行回调。当<strong>轮询</strong>阶段空闲，并且存在通过<code>setImmediate()</code>设置的回调，那么事件循环不再等待，而是进入这个阶段。</p>\n<p><code>setImmediate</code>实际上是一个在事件循环单独的阶段执行的定时器。它通过libuv的API，设置在轮询阶段结束后立刻执行的回调。</p>\n<p>通常，虽然代码的执行，系统一定会进入<strong>轮询</strong>阶段，然后等待新的请求、连接之类的。但是如果存在通过<code>setImmediate()</code>设置的回调并且<strong>轮询</strong>阶段空闲，那么事件循环就不在等待<strong>轮询</strong>事件而是进入<strong>检查</strong>阶段处理这些回调。</p>\n<h3 id=\"关闭回调\"><a href=\"#关闭回调\" class=\"headerlink\" title=\"关闭回调\"></a>关闭回调</h3><p>如果一个socket或者句柄突然关闭（如<code>socket.destroy()</code>），那么<code>error</code>事件会在这个阶段触发。除此之外这些事件通过<code>process.nextTick()</code>来触发。</p>\n<h2 id=\"setImmediate-vs-setTimeout\"><a href=\"#setImmediate-vs-setTimeout\" class=\"headerlink\" title=\"setImmediate() vs setTimeout()\"></a><code>setImmediate()</code> vs <code>setTimeout()</code></h2><p><code>setImmediate()</code>和<code>setTimeout()</code>很像，但根据它们在不同的阶段调用，会有不同表现。</p>\n<ul>\n<li><code>setImmedate()</code>的设计用途是在<strong>轮询</strong>阶段结束后立刻执行回调。</li>\n<li><code>setTimeout()</code>的设计用途是在满足指定的时间阈值后执行回调。</li>\n</ul>\n<p>调用它们的时机会影响对应回调的执行顺序。如果它们都在主模块中调用，那么回调的顺序与脚本执行的速度直接相关（可能受到机器上其他应用的影响）。</p>\n<p>例如，我们在非IO循环（比如主模块）中运行下面这个脚本，那么脚本内的两个定时任务执行的顺序，受到脚本运行速度的影响而无法确定。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// timeout_vs_immediate.js</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> node timeout_vs_immediate.js</span><br><span class=\"line\">timeout</span><br><span class=\"line\">immediate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> node timeout_vs_immediate.js</span><br><span class=\"line\">immediate</span><br><span class=\"line\">timeout</span><br></pre></td></tr></table></figure>\n<p>但是如果我们在IO循环内执行上面那个脚本，那么总是会先执行<code>setImmediate()</code>对应的回调。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// timeout_vs_immediate.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(__filename, () =&gt; &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> node timeout_vs_immediate.js</span><br><span class=\"line\">immediate</span><br><span class=\"line\">timeout</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> node timeout_vs_immediate.js</span><br><span class=\"line\">immediate</span><br><span class=\"line\">timeout</span><br></pre></td></tr></table></figure>\n<p>因此相对于<code>setTimeout()</code>，<code>setImmediate()</code>最大的优势就是，只要是在IO循环内，无论存在多少个定时器，<code>setImmediate()</code>的回调总是会最先执行。</p>\n<h2 id=\"process-nextTick\"><a href=\"#process-nextTick\" class=\"headerlink\" title=\"process.nextTick()\"></a><code>process.nextTick()</code></h2><h3 id=\"理解process-nextTick\"><a href=\"#理解process-nextTick\" class=\"headerlink\" title=\"理解process.nextTick()\"></a>理解<code>process.nextTick()</code></h3><p>你或许已经注意到<code>process.nextTick()</code>作为一个异步API，却并没有出现在上面的流程示意图中。这是因为<code>process.nextTick()</code>技术上来说并不是事件循环的一部分。无论事件循环处于哪个阶段，<code>process.nextTick()</code>总是会在当前的操作结束后立刻执行。</p>\n<p>再回过头看看异步循环的示意图，在某个阶段调用<code>process.nextTick()</code>后，所有<code>process.nextTick()</code>设置的回调都会在下个阶段开始前执行。这种特性可能会导致一些严重的问题。如果递归的调用<code>process.nextTick()</code>，那么就是因为无法进入轮询阶段而导致IO饥饿。</p>\n<h3 id=\"为什么允许使用这个API\"><a href=\"#为什么允许使用这个API\" class=\"headerlink\" title=\"为什么允许使用这个API\"></a>为什么允许使用这个API</h3><p>那么为什么要在Nodejs中开放对这个API的使用呢。原因之一就是在Nodejs的设计理念中，API应该总是异步的，即使没有那个必要。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apiCall</span>(<span class=\"params\">arg, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> arg !== <span class=\"string\">'string'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> process.nextTick(callback,</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'argument should be string'</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码作用是检查参数是否正确，如果不正确那么通过回调回传一个错误。<code>process.nextTick()</code>这个API最近有一个更新，使它能够接收<code>callback</code>以外的参数，并将这些参数传递给<code>callback</code>回调函数。这样就不用再给<code>callback</code>加一层嵌套。</p>\n<p>那么这个代码要做的是，在用户其他代码执行完毕后再向用户返回这个错误。通过<code>process.nextTick()</code>，可以确保<code>apiCall</code>的回调一定能够在用户的代码执行完毕后，并且在进入事件循环的下一个环节之前执行。为了实现这个功能，系统允许展开JS调用栈，并且直接执行对应的回调。因此用户可以无限嵌套的调用<code>process.nextTick()</code>而不会触发<code>RangeError: Maximum call stack size exceeded from v8</code>的错误。</p>\n<p>Nodejs的这个设计理念，可能会导致一些麻烦的情况。可以看一看下面这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个函数有异步函数的特征，却以同步的方式调用回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncApiCall</span>(<span class=\"params\">callback</span>) </span>&#123; callback(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调函数在someAsyncApiCall结束之前调用了</span></span><br><span class=\"line\">someAsyncApiCall(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// someAsyncApiCall结束了，但是bar还没有被赋值</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>, bar); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bar = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>用户定义了一个具有异步特征的函数，但实际上确实同步执行的。当调用<code>someAsyncApiCall()</code>时，因为没有任何异步行为，其回调会在同一个事件循环的环节里执行。那么由于这个脚本还没有运行到后面，所以当在回调里读取<code>bar</code>时，其值并不存在。</p>\n<p>使用<code>process.nextTick()</code>后，脚本就能在回调执行前完成初始化变量、函数之类的工作。<code>process.nextTick()</code>同时也有防止事件循环进入下一个环节的能力。有时候我们需要在进入事件循环的下一个环节之前就把当前环节出现的错误通知给用户。</p>\n<p>这是上面使用了<code>process.nextTick()</code>的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncApiCall</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  process.nextTick(callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">someAsyncApiCall(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>, bar); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bar = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>这是实际工作中的一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> server = net.createServer(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;).listen(<span class=\"number\">8080</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'listening'</span>, () =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p>当只传端口参数时，系统会立刻绑定端口号，并且立刻执行<code>listen()</code>回调。但是此时<code>.on(&#39;listening&#39;)</code>还没有执行，其回调也不会在绑定端口号后触发执行。</p>\n<p>为了绕过这个问题，<code>listen()</code>使用<code>nextTick()</code>将事件放到队列里，等脚本同步执行完毕后才会触发事件回调。这样，用户就可以按上面的方式设置事件回调函数了。</p>\n<h2 id=\"process-nextTick-vs-setImmediate\"><a href=\"#process-nextTick-vs-setImmediate\" class=\"headerlink\" title=\"process.nextTick() vs setImmediate()\"></a><code>process.nextTick()</code> vs <code>setImmediate()</code></h2><p>那么对于用户来说，就有了两个功能类似但是名字容易让人混淆的API了。</p>\n<ul>\n<li><code>process.nextTick()</code>: 在当前事件循环环节立即触发回调。</li>\n<li><code>setImmediate()</code>: 在当前事件循环环节后面的环节触发回调。</li>\n</ul>\n<p>本质上来说，这两个API互换名称才更符合他们的表现，<code>process.nextTick()</code>比<code>setImmediate()</code>要『更加立即』的执行回调。但是由于历史原因也不太可能更改这两个API的名称，将它们对调可能会引起npm上的库大面积失效。每天都会有新的包加入到npm中，也就是说每过一天，互换这两个API名称带来的潜在危险也就越大。</p>\n<p><em>我们建议用户使用<code>setImmediate()</code>，因为这个API名称释义性更强。（并且它的兼容性也更强，比如兼容浏览器端的js）</em></p>\n<h2 id=\"为什么使用process-nextTick\"><a href=\"#为什么使用process-nextTick\" class=\"headerlink\" title=\"为什么使用process.nextTick()?\"></a>为什么使用<code>process.nextTick()</code>?</h2><p>有以下两个主要的原因。</p>\n<ol>\n<li>允许用户处理错误、清理后续不再使用的资源，以及可能的在事件循环进入下一环节之前发起一个新的请求。</li>\n<li>有时候需要在栈展开结束后，下一个事件循环环节之前执行回调。 </li>\n</ol>\n<p>如下就是一个满足用户预期的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> server = net.createServer();</span><br><span class=\"line\">server.on(<span class=\"string\">'connection'</span>, (conn) =&gt; &#123; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8080</span>);</span><br><span class=\"line\">server.on(<span class=\"string\">'listening'</span>, () =&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure>\n<p>假设<code>listen()</code>在事件循环之初执行，而对应的回调通过<code>setImmediate()</code>设置。绑定端口会立刻执行，除非参数中有hostname。那么对于事件循环来说，它必须进入<strong>轮询</strong>环节之后，才会执行<code>listen</code>回调。在<strong>轮询</strong>环节，那么就可能收到一个连接，并在<code>listen</code>事件之前触发<code>connection</code>事件。</p>\n<p>另外一种情况就是，在继承了<code>EventEmitter</code>的类的构造函数中触发事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyEmitter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  EventEmitter.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.emit(<span class=\"string\">'event'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">util.inherits(MyEmitter, EventEmitter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myEmitter = <span class=\"keyword\">new</span> MyEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'an event occurred!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>由于用户还没有给对象设置事件的回调，在构造函数中触发事件不会触发任何回调。因此，可以通过<code>process.nextTick()</code>赋予在构造函数中触发回调的能力。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyEmitter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  EventEmitter.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用nextTick来触发事件</span></span><br><span class=\"line\">  process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emit(<span class=\"string\">'event'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">util.inherits(MyEmitter, EventEmitter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myEmitter = <span class=\"keyword\">new</span> MyEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'an event occurred!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjsynd1290000huwfcm9w7ptn","category_id":"cjsynd12i0002huwfbj7b2xjt","_id":"cjsynd12r000ahuwf13efkiul"},{"post_id":"cjsynd12g0001huwfribsv1df","category_id":"cjsynd12i0002huwfbj7b2xjt","_id":"cjsynd12s000ehuwf9znuqu9c"},{"post_id":"cjsynd12k0004huwfsbhja7ot","category_id":"cjsynd12i0002huwfbj7b2xjt","_id":"cjsynd12t000ghuwfewajybsf"},{"post_id":"cjsynd12m0005huwfsj3rx4p4","category_id":"cjsynd12s000dhuwf0bmqgi5q","_id":"cjsynd12t000hhuwf6fxxotrh"},{"post_id":"cjsynd19b000ihuwfmgy1ipt9","category_id":"cjsynd12i0002huwfbj7b2xjt","_id":"cjsynd19e000khuwfdolpw2if"}],"PostTag":[{"post_id":"cjsynd1290000huwfcm9w7ptn","tag_id":"cjsynd12k0003huwfmxge4kda","_id":"cjsynd12p0008huwfawlb9ck9"},{"post_id":"cjsynd12g0001huwfribsv1df","tag_id":"cjsynd12n0007huwfkpdvtuf7","_id":"cjsynd12s000chuwfbnytj3m6"},{"post_id":"cjsynd12k0004huwfsbhja7ot","tag_id":"cjsynd12r000bhuwfok6869rz","_id":"cjsynd12t000fhuwf72d82amo"},{"post_id":"cjsynd19b000ihuwfmgy1ipt9","tag_id":"cjsynd12k0003huwfmxge4kda","_id":"cjsynd19d000jhuwfeviuntw3"}],"Tag":[{"name":"学习","_id":"cjsynd12k0003huwfmxge4kda"},{"name":"技巧","_id":"cjsynd12n0007huwfkpdvtuf7"},{"name":"周刊","_id":"cjsynd12r000bhuwfok6869rz"}]}}